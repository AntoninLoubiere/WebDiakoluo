

/* ############################# res/js/pages/page.js #############################*/

class Page {
    constructor(pageView, pageName, requireTest, onload, onupdate, ondelete) {
        this.page = pageView;
        this.pageName = pageName;
        this.onload = onload;
        this.onupdate = onupdate;
        this.ondelete = ondelete;
        this.requireTest = requireTest;
    }

    hide() {
        this.page?.classList.add('hide');
        this.ondelete?.();
    }
}

/* ############################# res/js/pages/main.js #############################*/

const MAIN_URL = "/WebDiakoluo/index.html"

var PAGES = {};

var currentURL = new URL(window.location)
var currentPage = new Page(null, null);
var currentPageName = null;
var currentTest = null;
var currentModal = null;
var currentState = {};

/* init navigation */
function initNavigation() {
    window.onpopstate = function() {
        loadPage();
    }

    const callback = function() {
        document.getElementById('loading-page').classList.add('hide');
        loadPage();
    }

    if (isTranslationsReady()) { // ensure that translations are ready
        callback();
    } else {
        onTranslationReady = callback;
    }
}

/* load a page / process the ur l*/
function loadPage() {
    currentURL = new URL(window.location);
    var page = currentURL.searchParams.get('page');
    if (page && currentPage.name == page) {
        if (currentPage.onupdate) {
            if (currentPage.requireTest) loadPageRequiringTest(page, true);
            else currentPage.onupdate?.();
        }
    } else {
        currentPage.hide();
        if (currentModal) {
            hideModal(currentModal); 
            currentModal = null;
        }
        currentState = {};

        currentPage = PAGES[page] || defaultPage;
        if (currentPage.requireTest) {
            loadPageRequiringTest();
        } else {
            currentPage.onload?.();
        }
    }
}

/* load a page that require a test */
function loadPageRequiringTest(page, update = false) {
    var testId = Number(currentURL.searchParams.get('test'));
    if (testId) {
        if (testId != currentTest?.id) {
            var request = getFullTest(testId);
            request.onsuccess = function(test) {
                currentTest = test;
                currentPage.onload?.();
            };
            request.onerror = function(event) {
                backToMain();
            };
            currentState = {};
        } else {
            if (update) {
                currentPage.onupdate?.();
            } else {
                currentPage.onload?.();
            }
        }
    } else {
        backToMain();
    }
}

/* return to the list if an error occur for example */
function backToMain(newState = false) {
    if (newState) {
        window.history.pushState({}, 'Main page', MAIN_URL);
    } else {
        window.history.replaceState({}, 'Main page', MAIN_URL);
    }
    loadPage();
}

function onkeydown(event) {
    currentPage.onkeydown?.(event);
}
document.onkeydown = onkeydown;

function onvisibilitychange(event) {
    currentPage.onvisibilitychange?.(event);
}
document.onvisibilitychange = onvisibilitychange;

testDBCallbacks.push(initNavigation);

/* ########################## res/js/pages/index/list.js ##########################*/

const listPageView = document.getElementById('list-page');
const listPageTestList = document.getElementById('list-test');

const testListTemplate = document.getElementById('list-test-child-template');

const defaultPage = new Page(listPageView, "", false, loadListPage);

function reloadTestList() {
    removeAllChildren(listPageTestList);
    forEachHeader().onsuccess = function(event) {
        var cursor = event.target.result;
        if (cursor) {
            var t = testListTemplate.content.cloneNode(true);
            var v = cursor.value;
            var id = cursor.value.id;
            if (id == "edit") {
                t.querySelector('.test-title').textContent = getTranslation("edited-test");
                t.querySelector('.test-description').textContent = v.title;
                t.children[0].onclick = function() {
                    currentURL.searchParams.set('page', 'edit');
                    currentURL.searchParams.set('test', 'current');
                    window.history.pushState({}, 'Edit page', currentURL);
                    loadPage();
                }
                listPageTestList.insertBefore(t, listPageTestList.firstChild); // insert at first
            } else {
                t.querySelector('.test-title').textContent = v.title;
                t.querySelector('.test-description').textContent = v.description;
                t.children[0].onclick = function() {
                    viewTestPage(id);
                }
                listPageTestList.appendChild(t);
                cursor.continue();
            }
        }
    };
}

function loadListPage() {
    listPageView.classList.remove('hide');
    updatePageTitle('title-index.html');
    reloadTestList();
}

function viewTestPage(id) {
    currentURL.searchParams.set('page', 'view');
    currentURL.searchParams.set('test', id);
    window.history.pushState({}, 'View page', currentURL);
    loadPage();
}

/* ########################## res/js/pages/index/view.js ##########################*/

const viewPageView = document.getElementById('view-page');

const viewPageTitle = [document.getElementById('view-test-title'), document.getElementById('view-test-title2')];
const viewPageDescription = document.getElementById('view-test-description');
const viewPageCreatedDate = document.getElementById('view-test-created-date');
const viewPageModificationDate = document.getElementById('view-test-modification-date');
const viewPageColumnsList = document.getElementById('view-test-columns');
const viewPageDataTableHeader = document.getElementById('view-test-data-header');
const viewPageDataTableBody = document.getElementById('view-test-data-body');

const viewColumnModalTitle1 = document.getElementById('modal-view-column-title1');
const viewColumnModalTitle2 = document.getElementById('modal-view-column-title2');
const viewColumnModalDescription = document.getElementById('modal-view-column-description');

const viewDataModalContent = document.getElementById('view-test-data-content');
const viewDataModalId = document.getElementById('view-test-data-id');

const viewColumnTemplate = document.getElementById('view-column-child-template');
const viewDataTemplate = document.getElementById('view-data-child-template');

PAGES.view = new Page(viewPageView, "view", true, loadViewPage, updateViewPage, null);
PAGES.view.onkeydown = onkeydownViewPage;

function loadViewPage() {
    for (var i = 0; i < viewPageTitle.length; i++) {
        viewPageTitle[i].textContent = currentTest.title;
    }
    viewPageDescription.textContent = currentTest.description;
    viewPageCreatedDate.textContent = DATE_FORMATER.format(currentTest.createDate);
    viewPageModificationDate.textContent = DATE_FORMATER.format(currentTest.lastModificationDate);
    viewPageView.classList.remove('hide');

    removeAllChildren(viewPageColumnsList);
    removeAllChildren(viewPageDataTableHeader);
    removeAllChildren(viewPageDataTableBody);
    var e;
    var row = viewDataTemplate.content.cloneNode(true);
    row.querySelector('.min').innerHTML = '<x-i18n key="view"></x-i18n>';
    for (let i = 0; i < currentTest.columns.length; i++) {
        e = viewColumnTemplate.content.cloneNode(true);
        e.querySelector('.test-column-text').textContent = currentTest.columns[i].name;
        e.children[0].onclick = function() {
            viewColumnClickCallback(i);
        };

        viewPageColumnsList.appendChild(e);

        e = document.createElement('td');
        e.textContent = currentTest.columns[i].name;
        row.children[0].appendChild(e);
    }
    viewPageDataTableHeader.appendChild(row);

    for (let i = 0; i < currentTest.data.length; i++) {
        row = viewDataTemplate.content.cloneNode(true);
        for (var j = 0; j < currentTest.data[i].length; j++) {
            e = document.createElement('td');
            e.textContent = currentTest.columns[j].getDataValueString(currentTest.data[i][j]);
            row.children[0].appendChild(e);
        }
        row.children[0].onclick = function() {
            viewDataClickCallback(i);
        }
        viewPageDataTableBody.appendChild(row);
    }

    setPageTitle(currentTest.title);
    updateViewPage();
}

function updateViewPage() {
    var p = Number(currentURL.searchParams.get('column'));
    if (p) {
        if (p > currentTest.columns.length) p = currentTest.data.length;
        if (p <= 0) p = 1;
        updateViewColumnModal(p - 1);
        return;
    }

    p = Number(currentURL.searchParams.get('data'));
    if (p) {
        if (p > currentTest.data.length) p = currentTest.data.length;
        if (p <= 0) p = 1;
        updateViewDataModal(p - 1);
        return;
    }

    if (currentModal) {
        hideModal(currentModal);
        currentModal = null;
    }
}

function onkeydownViewPage(event) {
    switch (event.keyCode) {
        case KeyboardEvent.DOM_VK_ESCAPE:
            if (currentModal == 'view-test-column') {
                closeViewColumnModal();
            } else if (currentModal == 'view-test-data') {
                closeViewDataModal();
            } else {
                backToMain();
            }
            event.preventDefault();
            break;

        case KeyboardEvent.DOM_VK_RIGHT:
            if (currentModal == 'view-test-column') {
                nextViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                nextViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_LEFT:
            if (currentModal == 'view-test-column') {
                previousViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                previousViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_PAGE_DOWN:
            if (currentModal == 'view-test-column') {
                lastViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                lastViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_PAGE_UP:
            if (currentModal == 'view-test-column') {
                firstViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                firstViewData();
                event.preventDefault();
            }
            break;
    }
}

function updateViewColumnModal(id) {
    if (currentModal != "view-test-column") {
        currentModal = "view-test-column";
        showModal(currentModal);
        currentState.id = -1;
    }
    if (currentState.id != id) {
        currentState.id = id;
        
        var column = currentTest.columns[id];
        viewColumnModalTitle1.textContent = column.name;
        viewColumnModalTitle2.textContent = column.name;
        viewColumnModalDescription.textContent = column.description;
    }
}

function updateViewDataModal(id) {
    if (currentModal != "view-test-data") {
        currentModal = "view-test-data";
        showModal(currentModal);
        currentState.id = -1;
    }
    if (currentState.id != id) {
        currentState.id = id;

        var row = currentTest.data[id];
        viewDataModalId.textContent = id + 1;
        removeAllChildren(viewDataModalContent);
        var e;
        var column;
        for (var i = 0; i < row.length; i++) {
            column = currentTest.columns[i];
            e = document.createElement('h3');
            e.textContent = column.name + ":";
            e.classList = ['no-margin']
            viewDataModalContent.appendChild(e);

            e = document.createElement('div');
            e.textContent = column.getDataValueString(row[i]);
            viewDataModalContent.appendChild(e);
        }
    }
}

function viewColumnClickCallback(id) {
    updateViewColumnModal(id);
    currentURL.searchParams.set('column', id + 1);
    history.pushState({}, '', currentURL);
}

function nextViewColumn() {
    if (currentState.id < currentTest.columns.length - 1) {
        updateViewColumnModal(currentState.id + 1); // don't add to history in order to not spam the history 
    }
}

function previousViewColumn() {
    if (currentState.id > 0) {
        updateViewColumnModal(currentState.id - 1);
    }
}

function firstViewColumn() {
    updateViewColumnModal(0);
}

function lastViewColumn() {
    updateViewColumnModal(currentTest.columns.length - 1);
}

function viewDataClickCallback(id) {
    updateViewDataModal(id);
    currentURL.searchParams.set('data', id + 1);
    history.pushState({}, '', currentURL);
}

function nextViewData() {
    if (currentState.id < currentTest.data.length - 1) {
        updateViewDataModal(currentState.id + 1);
    }
}

function previousViewData() {
    if (currentState.id > 0) {
        updateViewDataModal(currentState.id - 1);
    }
}

function firstViewData() {
    updateViewDataModal(0);
}

function lastViewData() {
    updateViewDataModal(currentTest.data.length - 1);
}

function closeViewColumnModal() {
    currentURL.searchParams.delete('column');
    history.pushState({}, '', currentURL);
    hideModal(currentModal);
    currentModal = null;
}

function closeViewDataModal() {
    currentURL.searchParams.delete('data');
    history.pushState({}, '', currentURL);
    hideModal(currentModal);
    currentModal = null;
}

function editTestViewPage() {
    console.log("test");
    currentURL.searchParams.set('page', 'edit');
    history.pushState({}, 'Edit test', currentURL);
    loadPage();
}

/* ########################## res/js/pages/index/edit.js ##########################*/

const EDIT_AUTO_SAVE_TIME = 10 * 1000;

const editPageView = document.getElementById('edit-page');
const editPageTitle = document.getElementById('edit-test-title');
const editPageDescription = document.getElementById('edit-test-description');
const editPageColumnsList = document.getElementById('edit-test-columns');
const editPageDataTableHeader = document.getElementById('edit-test-data-header');
const editPageDataTableBody = document.getElementById('edit-test-data-body');

const editColumnModalTitle1 = document.getElementById('modal-edit-column-title1');
const editColumnModalTitle2 = document.getElementById('modal-edit-column-title2');
const editColumnModalDescription = document.getElementById('modal-edit-column-description');

const editDataModalContent = document.getElementById('edit-test-data-content');
const editDataModalId = document.getElementById('edit-test-data-id');

const editColumnTemplate = document.getElementById('edit-column-child-template');
const editDataTemplate = document.getElementById('edit-data-child-template');

var editPageAutoSaveId;

PAGES.edit = new Page(editPageView, 'edit', false, loadEditPage, updateEditPage, deleteEditPage);
PAGES.edit.onvisibilitychange = visibilityChangeEditPage;

/* When the page is loaded */
function loadEditPage() {
    var testId = currentURL.searchParams.get('test');
    if (testId == "new") {
        currentTest = new Test(getTranslation("default-test-title"), getTranslation("defualt-test-description"));
        currentTest.id = EDIT_KEY;
        loadTestEditPage();
    } else if (testId == "current") {
        if (currentTest?.id == EDIT_KEY) {
            loadTestEditPage();
        } else {
            var request = getFullTest(EDIT_KEY);
            request.onsuccess = function(test) {
                currentTest = test;
                loadTestEditPage();
            }
            request.onerror = backToMain;
        }
    } else {
        testId = Number(testId);
        if (testId) {
            if (currentTest?.id == EDIT_KEY) {
                if (currentTest.edit_id == testId) {
                    loadTestEditPage();
                } else {
                    initialiseTestEditPage(testId);
                }
            } else {
                var request = getFullTest(EDIT_KEY);
                request.onsuccess = function(test) {
                    if (testId == test.edit_id) {
                        currentTest = test;
                        loadTestEditPage();
                    } else {
                        initialiseTestEditPage(testId);
                    }
                }
                request.onerror = function() {
                    initialiseTestEditPage(testId);
                }
            }
        } else {
            backToMain();
        }
    }
}

/* When the page is updated */
function updateEditPage() {
    if (currentTest?.id == EDIT_KEY) {
        var testId = currentURL.searchParams.get('test');
        if (testId == "new") {
            if (testId.edit_id) {
                deleteEditPage();
                loadEditPage();
            }
        } else if (testId != "current") {
            testId = Number(testId);
            if (testId != currentTest.edit_id) {
                deleteEditPage();
                loadEditPage();
            }
        }
    } else {
        deleteEditPage();
        loadEditPage();
    }

}

/* create a new edit test from a test already existing */
function initialiseTestEditPage(id) {
    // TODO warning erase test
    request = getFullTest(id);
    request.onsuccess = function(test) {
        currentTest = test;
        currentTest.edit_id = id;
        currentTest.id = EDIT_KEY;
        loadTestEditPage();
    }

    request.onerror = backToMain;
}

/* when the page is deleted */
function deleteEditPage() {
    if (currentTest) saveTestEditPage();
    clearInterval(editPageAutoSaveId);
    editPageAutoSaveId = null;
}

/* load the current test in the UI*/
function loadTestEditPage() {
    // TODO
    editPageTitle.value = currentTest.title;
    editPageDescription.value = currentTest.description;

    removeAllChildren(editPageColumnsList);
    removeAllChildren(editPageDataTableHeader);
    removeAllChildren(editPageDataTableBody);

    visibilityChangeEditPage(); // set auto save automatic
    editPageView.classList.remove('hide');

    var row = editDataTemplate.content.cloneNode(true);
    row.querySelector('.min').innerHTML = '<x-i18n key="edit"></x-i18n>';
    editPageDataTableHeader.appendChild(row);
    for (let i = 0; i < currentTest.columns.length; i++) {
        addColumnChildEditPage(i);
    }

    for (let i = 0; i < currentTest.data.length; i++) {
        addDataChildEditPage(i);
    }

    setPageTitle(currentTest.title);
}

/* Add a column in the UI */
function addColumnChildEditPage(index) {
    var column = currentTest.columns[index];
    var e = editColumnTemplate.content.cloneNode(true);
    e.querySelector('.test-column-text').textContent = column.name;
    e.children[0].onclick = function() {
        onColumnClickEditPage(index);
    };

    editPageColumnsList.appendChild(e);

    e = document.createElement('td');
    e.textContent = column.name;
    editPageDataTableHeader.children[0].appendChild(e);
}

/* Update a column in the UI */
function updateColumnChildEditPage(index) {
    var column = currentTest.columns[index];
    var e = editPageColumnsList.children[index];
    e.querySelector('.test-column-text').textContent = column.name;

    e = editPageDataTableHeader.children[0].children[index + 1]; // +1 because of the min td in first place
    e.textContent = column.name;
}

/* reset onclick events in columns when the order is modified */
function resetColumnsClickEditPage() {
    for (let i = 0; i < currentTest.columns.length; i++) {
        editPageColumnsList.children[i].onclick = function() {
            onColumnClickEditPage(i);
        };
    }
}

/* when a column edit is click */
function onColumnClickEditPage(index) {
    console.log(index);  
}

/* Add a data in the UI */
function addDataChildEditPage(index) {
    var row = editDataTemplate.content.cloneNode(true);
    var e;
    for (var j = 0; j < currentTest.data[index].length; j++) {
        e = document.createElement('td');
        e.textContent = currentTest.columns[j].getDataValueString(currentTest.data[index][j]);
        row.children[0].appendChild(e);
    }
    row.children[0].onclick = function() {
        onDataClickEditPage(index);
    }
    editPageDataTableBody.appendChild(row);
}

/* Update a data in the UI */
function updateDataChildEditPage(index) {
    var row = editPageDataTableBody.children[index];
    var e;
    for (var j = 0; j < currentTest.data[index].length; j++) {
        e = row.children[j + 1]; // +1 because of the min td at first
        e.textContent = currentTest.columns[j].getDataValueString(currentTest.data[index][j]);
    }
}

/* when a data edit is click */
function onDataClickEditPage(index) {
    console.log(index);  
}

/* when the visibility of the page change */
function visibilityChangeEditPage() {
    if (document.hidden) {
        saveTestEditPage();
        clearInterval(editPageAutoSaveId);
        editPageAutoSaveId = null;
    } else {
        editPageAutoSaveId = setInterval(saveTestEditPage, EDIT_AUTO_SAVE_TIME);
    }
}

/* save the edited test */
function saveTestEditPage() {
    currentTest.title = editPageTitle.value;
    currentTest.description = editPageDescription.value;

    updateTest(currentTest);
}

/* callback for the cancel button */
function cancelButtonEditPage() {
    var id = currentTest.edit_id;
    currentTest = null;
    deleteTest(EDIT_KEY);
    if (id) viewTestPage(id);
    else backToMain(true);
}

/* callback for the save button */
function saveButtonEditPage() {
    saveTestEditPage();
    currentTest.registerModificationDate();
    if (currentTest.edit_id) {
        currentTest.id = currentTest.edit_id;
        delete currentTest.edit_id;
        updateTest(currentTest).onsuccess = function(event) {
            viewTestPage(event.target.result);
        };
        deleteTest(EDIT_KEY);
        currentTest = null; // do not save on delete
    } else {
        delete currentTest.id;
        addNewTest(currentTest).onsuccess = function(event) {
            viewTestPage(event.target.result);
        };
        deleteTest(EDIT_KEY);
        currentTest = null; // do not save on delete
    }
}