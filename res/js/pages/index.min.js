

/* ############################# res/js/pages/page.js #############################*/

class Page {
    constructor(pageView, pageName, requireTest) {
        this.page = pageView;
        this.pageName = pageName;
        this.requireTest = requireTest;
    }

    hide() {
        this.page?.classList.add('hide');
        this.ondelete?.();
    }
}

/* ############################# res/js/pages/main.js #############################*/

const MAIN_URL = "/WebDiakoluo/index.html"

var PAGES = {};

var currentURL = new URL(window.location)
var currentPage = new Page(null, null);
var currentPageName = null;
var currentTest = null;
var currentModal = null;
// deprecated, use in class variables instead
var currentState = {};

/* init navigation */
function initNavigation() {
    window.onpopstate = function() {
        loadPage();
    }

    const callback = function() {
        document.getElementById('loading-page').classList.add('hide');
        loadPage();
    }

    if (isTranslationsReady()) { // ensure that translations are ready
        callback();
    } else {
        onTranslationReady = callback;
    }
}

/* load a page / process the ur l*/
function loadPage() {
    currentURL = new URL(window.location);
    var page = currentURL.searchParams.get('page') || "";
    if (page && currentPage.pageName == page) {
        if (currentPage.onupdate) {
            console.debug("Update page", page);
            if (currentPage.requireTest) loadPageRequiringTest(true);
            else currentPage.onupdate?.();
        }
    } else {
        console.debug("Load page", page);

        setPage(PAGES[page.replaceAll('-', '_')] || defaultPage);
    }
}

function setPage(page) {
    currentPage.hide();
    if (currentModal) {
        hideModal(currentModal); 
        currentModal = null;
    }
    currentState = {};
    
    currentPage = page;
    if (currentPage.requireTest) {
        loadPageRequiringTest();
    } else {
        currentPage.onload?.();
    }
}

/* load a page that require a test */
function loadPageRequiringTest(update = false) {
    var testId = Number(currentURL.searchParams.get('test'));
    if (testId) {
        if (testId != currentTest?.id) {
            var request = DATABASE_MANAGER.getFullTest(testId);
            request.onsuccess = function(test) {
                currentTest = test;
                currentPage.onload?.();
            };
            request.onerror = function(event) {
                backToMain();
            };
            currentState = {};
        } else {
            if (update) {
                currentPage.onupdate?.();
            } else {
                currentPage.onload?.();
            }
        }
    } else {
        backToMain();
    }
}

/* return to the list if an error occur for example */
function backToMain(newState = false) {
    if (newState) {
        window.history.pushState({}, 'Main page', MAIN_URL);
    } else {
        window.history.replaceState({}, 'Main page', MAIN_URL);
    }
    loadPage();
}

function onkeydown(event) {
    currentPage.onkeydown?.(event);
}
document.onkeydown = onkeydown;

function onvisibilitychange(event) {
    currentPage.onvisibilitychange?.(event);
}
document.onvisibilitychange = onvisibilitychange;

DATABASE_MANAGER.setOnLoaded(initNavigation);

/* ####################### res/js/pages/index/callbacks.js ########################*/

document.getElementById('nav-logo').onclick = () => backToMain(true);


/* ######################### res/js/pages/index/utils.js ##########################*/

/* redirect to the view page of a test */
function viewTestPage(id) {
    currentURL.searchParams.set('page', 'view');
    currentURL.searchParams.set('test', id);
    window.history.pushState({}, 'View page', currentURL);
    loadPage();
}

/* redirect to add a test */
function addTestRedirect() {
    currentURL.searchParams.set('page', 'edit');
    currentURL.searchParams.set('test', 'new');
    window.history.pushState({}, 'Edit page', currentURL);
    loadPage();
}

/* ########################## res/js/pages/index/list.js ##########################*/

const listPageView = document.getElementById('list-page');
const listPageTestList = document.getElementById('list-test');

const testListTemplate = document.getElementById('list-test-child-template');

const importModalInput = document.getElementById('import-test-input');
const importModalSelect = document.getElementById('import-test-select');
const importModalCsv = document.getElementById('import-csv');
const importModalCsvColumnName = document.getElementById('import-csv-column-name');
const importModalCsvColumnType = document.getElementById('import-csv-column-type');

document.getElementById('list-add-button').onclick = addTestRedirect;

class ListPage extends Page {
    constructor() {
        super(listPageView, "", false);

        document.getElementById('import-form').onsubmit = this.importTestCallback.bind(this);
        document.getElementById('list-import-button').onclick = this.importTest.bind(this);
        document.getElementById('list-export-all-button').onclick = this.exportAllTest.bind(this);
        
        importModalInput.onchange = this.importFileChange.bind(this);
        importModalSelect.onchange = this.importSelectChange.bind(this);
    }

    /* load list page */
    onload() {
        updatePageTitle('title-index.html');
        listPageView.classList.remove('hide');
        this.reloadList();
    }

    onkeydown(event) {
        if (event.keyCode == KeyboardEvent.DOM_VK_ESCAPE) {
            if (currentModal)
                hideModal(currentModal);
        }
    }

    /* reload the test list */
    reloadList() {
        removeAllChildren(listPageTestList);
        DATABASE_MANAGER.forEachHeader().onsuccess = function(event) {
            var cursor = event.target.result;
            if (cursor) {
                var t = testListTemplate.content.cloneNode(true);
                var v = cursor.value;
                var id = cursor.value.id;
                if (id == EDIT_KEY) {
                    t.querySelector('.test-title').textContent = getTranslation("edited-test");
                    t.querySelector('.test-description').textContent = v.title;
                    t.children[0].onclick = function() {
                        currentURL.searchParams.set('page', 'edit');
                        currentURL.searchParams.set('test', 'current');
                        window.history.pushState({}, 'Edit page', currentURL);
                        loadPage();
                    }
                    listPageTestList.insertBefore(t, listPageTestList.firstChild); // insert at first
                } else {
                    t.querySelector('.test-title').textContent = v.title;
                    t.querySelector('.test-description').textContent = v.description;
                    t.children[0].onclick = function() {
                        viewTestPage(id);
                    }
                    listPageTestList.appendChild(t);
                    cursor.continue();
                }
            }
        };
    }

    importTest() {
        showModal('import-test');
        currentModal = 'import-test';
        history.pushState({}, '');
        this.importFileChange();
        this.importSelectChange();
    }

    importTestCallback(event) {
        event.preventDefault();
        hideModal('import-test');

        for (var i = 0; i < importModalInput.files.length; i++) {
            FILE_MANAGER.importTest(
                importModalInput.files[i], 
                importModalSelect.value == 'dkl', 
                importModalCsvColumnName.checked, 
                importModalCsvColumnType.checked
            ).then(this.reloadList).catch(() => console.warn("Error while importing test"));
        }
    }

    importFileChange() {
        if (importModalInput.files.length > 0) {
            FILE_MANAGER.getTypeFile(importModalInput.files[0]).then(
                (formatFile) => {
                    importModalSelect.value = formatFile ? 'dkl' : 'csv'
                    this.importSelectChange();
                }
            );
            
        }
    }

    importSelectChange() {
        if (importModalSelect.value === 'dkl') {
            importModalCsv.classList.add('hide');
        } else {
            importModalCsv.classList.remove('hide');
        }
    }

    exportAllTest() {
        FILE_MANAGER.exportAllTest();
    }
}

const defaultPage = new ListPage();

/* ########################## res/js/pages/index/view.js ##########################*/

const viewPageView = document.getElementById('view-page');

const viewPageTitle = [document.getElementById('view-test-title'), document.getElementById('view-test-title2')];
const viewPageDescription = document.getElementById('view-test-description');
const viewPageCreatedDate = document.getElementById('view-test-created-date');
const viewPageModificationDate = document.getElementById('view-test-modification-date');
const viewPageColumnsList = document.getElementById('view-test-columns');
const viewPageDataTableHeader = document.getElementById('view-test-data-header');
const viewPageDataTableBody = document.getElementById('view-test-data-body');

const viewColumnModalTitle1 = document.getElementById('modal-view-column-title1');
const viewColumnModalTitle2 = document.getElementById('modal-view-column-title2');
const viewColumnModalDescription = document.getElementById('modal-view-column-description');
const viewColumnModalSettings = document.getElementById('modal-view-column-settings');

const exportModalSelect = document.getElementById('export-test-select');
const exportModalCsv = document.getElementById('export-csv');
const exportModalCsvColumnName = document.getElementById('export-csv-column-name');
const exportModalCsvColumnType = document.getElementById('export-csv-column-type');

const viewDataModalContent = document.getElementById('view-test-data-content');
const viewDataModalId = document.getElementById('view-test-data-id');

const viewColumnTemplate = document.getElementById('view-column-child-template');
const viewDataTemplate = document.getElementById('view-data-child-template');

class ViewPage extends Page {
    constructor() {
        super(viewPageView, "view", true);

        document.getElementById('view-play-button').onclick = this.playTest.bind(this);
        document.getElementById('view-edit-button').onclick = this.editTest.bind(this);
        document.getElementById('view-export-button').onclick = this.exportTest.bind(this);
        document.getElementById('view-delete-button').onclick = this.deleteTest.bind(this);
        document.getElementById('view-column-close-modal').onclick = this.closeColumnModal.bind(this);
        document.getElementById('view-data-close-modal').onclick = this.closeDataModal.bind(this);
        document.getElementById('test-delete-confirm-button').onclick = this.deleteTestConfirm.bind(this);

        document.getElementById('export-form').onsubmit = this.exportTestConfirm.bind(this);
        exportModalSelect.onchange = this.exportWarningCsv.bind(this);

        this.columnsModalNav = new NavigationBar(document.getElementById('view-column-nav-bar'));
        this.columnsModalNav.onfirst = this.firstColumn.bind(this); 
        this.columnsModalNav.onprevious = this.previousColumn.bind(this); 
        this.columnsModalNav.onnext = this.nextColumn.bind(this); 
        this.columnsModalNav.onlast = this.lastColumn.bind(this); 

        this.dataModalNav = new NavigationBar(document.getElementById('view-data-nav-bar'));
        this.dataModalNav.onfirst = this.firstData.bind(this); 
        this.dataModalNav.onprevious = this.previousData.bind(this); 
        this.dataModalNav.onnext = this.nextData.bind(this); 
        this.dataModalNav.onlast = this.lastData.bind(this); 
    }

    /* when the page is loaded */
    onload() {
        for (var i = 0; i < viewPageTitle.length; i++) {
            viewPageTitle[i].textContent = currentTest.title;
        }
        viewPageDescription.textContent = currentTest.description;
        viewPageCreatedDate.textContent = DATE_FORMATER.format(currentTest.createDate);
        viewPageModificationDate.textContent = DATE_FORMATER.format(currentTest.lastModificationDate);

        removeAllChildren(viewPageColumnsList);
        removeAllChildren(viewPageDataTableHeader);
        removeAllChildren(viewPageDataTableBody);
        var e;
        var row = viewDataTemplate.content.cloneNode(true);
        row.querySelector('.min').innerHTML = '<x-i18n key="view"></x-i18n>';
        for (let i = 0; i < currentTest.columns.length; i++) {
            e = viewColumnTemplate.content.cloneNode(true);
            e.querySelector('.test-column-text').textContent = currentTest.columns[i].name;
            e.children[0].onclick = () => {
                this.columnClickCallback(i);
            };

            viewPageColumnsList.appendChild(e);

            e = document.createElement('td');
            e.textContent = currentTest.columns[i].name;
            row.children[0].appendChild(e);
        }
        viewPageDataTableHeader.appendChild(row);

        for (let i = 0; i < currentTest.data.length; i++) {
            row = viewDataTemplate.content.cloneNode(true);
            for (var j = 0; j < currentTest.data[i].length; j++) {
                e = document.createElement('td');
                e.appendChild(currentTest.columns[j].getViewView(currentTest.data[i][j]));
                row.children[0].appendChild(e);
            }
            row.children[0].onclick = () => {
                this.dataClickCallback(i);
            }
            viewPageDataTableBody.appendChild(row);
        }

        setPageTitle(currentTest.title);
        viewPageView.classList.remove('hide');
        this.onupdate();
    }

    /* when the page is updated */
    onupdate() {
        var p = Number(currentURL.searchParams.get('column'));
        if (p) {
            if (p > currentTest.columns.length) p = currentTest.data.length;
            if (p <= 0) p = 1;
            this.updateColumnModal(p - 1);
            return;
        }

        p = Number(currentURL.searchParams.get('data'));
        if (p) {
            if (p > currentTest.data.length) p = currentTest.data.length;
            if (p <= 0) p = 1;
            this.updateDataModal(p - 1);
            return;
        }

        if (currentModal) {
            hideModal(currentModal);
            currentModal = null;
        }
    }

    /* when a key is press */
    onkeydown(event) {
        switch (event.keyCode) {
            case KeyboardEvent.DOM_VK_ESCAPE:
                if (currentModal == 'view-test-column') {
                    this.closeColumnModal();
                } else if (currentModal == 'view-test-data') {
                    this.closeDataModal();
                } else if (currentModal) {
                    hideModal(currentModal);
                } else {
                    backToMain(true);
                }
                event.preventDefault();
                break;

            case KeyboardEvent.DOM_VK_RIGHT:
                if (currentModal == 'view-test-column') {
                    this.nextColumn();
                    event.preventDefault();
                } else if (currentModal == 'view-test-data') {
                    this.nextData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_LEFT:
                if (currentModal == 'view-test-column') {
                    this.previousColumn();
                    event.preventDefault();
                } else if (currentModal == 'view-test-data') {
                    this.previousData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_PAGE_DOWN:
                if (currentModal == 'view-test-column') {
                    this.lastColumn();
                    event.preventDefault();
                } else if (currentModal == 'view-test-data') {
                    this.lastData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_PAGE_UP:
                if (currentModal == 'view-test-column') {
                    this.firstColumn();
                    event.preventDefault();
                } else if (currentModal == 'view-test-data') {
                    this.firstData();
                    event.preventDefault();
                }
                break;
        }
    }

    /* update the column modal */
    updateColumnModal(id) {
        if (currentModal != "view-test-column") {
            currentModal = "view-test-column";
            showModal(currentModal);
            currentState.id = -1;
        }
        if (currentState.id != id) {
            currentState.id = id;
            
            var column = currentTest.columns[id];
            viewColumnModalTitle1.textContent = column.name;
            viewColumnModalTitle2.textContent = column.name;
            viewColumnModalDescription.textContent = column.description;
            viewColumnModalSettings.replaceChild(
                column.getViewColumnSettings(),
                viewColumnModalSettings.children[0]
            );
        }
    }

    /* update the data modal */
    updateDataModal(id) {
        if (currentModal != "view-test-data") {
            currentModal = "view-test-data";
            showModal(currentModal);
            currentState.id = -1;
        }
        if (currentState.id != id) {
            currentState.id = id;

            var row = currentTest.data[id];
            viewDataModalId.textContent = id + 1;
            removeAllChildren(viewDataModalContent);
            var e;
            var column;
            for (var i = 0; i < row.length; i++) {
                column = currentTest.columns[i];
                e = document.createElement('h3');
                e.textContent = column.name + ":";
                e.classList = ['no-margin']
                viewDataModalContent.appendChild(e);

                viewDataModalContent.appendChild(column.getViewView(row[i]));
            }
        }
    }

    /* when a column is clicked */
    columnClickCallback(id) {
        this.updateColumnModal(id);
        currentURL.searchParams.set('column', id + 1);
        history.pushState({}, '', currentURL);
    }

    /* go to the next column */
    nextColumn() {
        if (currentState.id < currentTest.columns.length - 1) {
            this.updateColumnModal(currentState.id + 1); // don't add to history in order to not spam the history 
        }
    }

    /* go to the previous column */
    previousColumn() {
        if (currentState.id > 0) {
            this.updateColumnModal(currentState.id - 1);
        }
    }

    /* go to the first column */
    firstColumn() {
        this.updateColumnModal(0);
    }

    /* go to the last column */
    lastColumn() {
        this.updateColumnModal(currentTest.columns.length - 1);
    }

    /* when a data is clicked */
    dataClickCallback(id) {
        this.updateDataModal(id);
        currentURL.searchParams.set('data', id + 1);
        history.pushState({}, '', currentURL);
    }

    /* go to the next data */
    nextData() {
        if (currentState.id < currentTest.data.length - 1) {
            this.updateDataModal(currentState.id + 1);
        }
    }

    /* go to the previous data */
    previousData() {
        if (currentState.id > 0) {
            this.updateDataModal(currentState.id - 1);
        }
    }

    /* go to the first data */
    firstData() {
        this.updateDataModal(0);
    }

    /* go to the last data */
    lastData() {
        this.updateDataModal(currentTest.data.length - 1);
    }

    /* close the column modal */
    closeColumnModal() {
        currentURL.searchParams.delete('column');
        history.pushState({}, '', currentURL);
        hideModal(currentModal);
        currentModal = null;
    }

    /* close the data modal */
    closeDataModal() {
        currentURL.searchParams.delete('data');
        history.pushState({}, '', currentURL);
        hideModal(currentModal);
        currentModal = null;
    }

    /* edit the test */
    editTest() {
        currentURL.searchParams.set('page', 'edit');
        history.pushState({}, 'Edit test', currentURL);
        loadPage();
    }

    /* play the test */
    playTest() {
        if (currentTest.isPlayable()) {
            currentURL.searchParams.set('page', 'play-settings');
            history.pushState({}, 'Play settings', currentURL);
            loadPage();
        } else {
            // TODO, warning
        }
    }

    /* delete the test */
    deleteTest() {
        showModal('test-delete-confirm');
        currentModal = 'test-delete-confirm';
        history.pushState({}, 'Modal');
    }

    /* callback for the delete confirm button */
    deleteTestConfirm() {
        DATABASE_MANAGER.deleteTest(currentTest.id);
        currentTest = null; // TODO cancel button
        backToMain(true);
    }

    exportTest() {
        showModal('export-test')
        currentModal = 'export-test';
        history.pushState({}, 'Modal');
        this.exportWarningCsv();
    }

    exportWarningCsv() {
        if (exportModalSelect.value == 'csv') {
            exportModalCsv.classList.remove('hide');
        } else {
            exportModalCsv.classList.add('hide');
        }
    }

    exportTestConfirm(event) {
        event.preventDefault();
        hideModal(currentModal);
        currentModal = null;

        if (exportModalSelect.value == 'dkl') {
            FILE_MANAGER.exportTest(currentTest);
        } else {
            FILE_MANAGER.exportCsvTest(currentTest, exportModalCsvColumnName.checked, exportModalCsvColumnType.checked);
        }
    }
}

PAGES.view = new ViewPage();


/* ########################## res/js/pages/index/edit.js ##########################*/

const EDIT_AUTO_SAVE_TIME = 10 * 1000;

const editPageView = document.getElementById('edit-page');
const editPageTitle = document.getElementById('edit-test-title');
const editPageDescription = document.getElementById('edit-test-description');
const editPageColumnsList = document.getElementById('edit-test-columns');
const editPageDataTableHeader = document.getElementById('edit-test-data-header');
const editPageDataTableBody = document.getElementById('edit-test-data-body');

const editColumnModalTitle1 = document.getElementById('modal-edit-column-title1');
const editColumnModalTitle2 = document.getElementById('modal-edit-column-title2');
editColumnModalTitle2.onkeyup = () => {editColumnModalTitle1.textContent = editColumnModalTitle2.value};
const editColumnModalDescription = document.getElementById('modal-edit-column-description');
const editColumnModalSettings = document.getElementById('modal-edit-column-settings')

const editDataModalContent = document.getElementById('edit-test-data-content');
const editDataModalId = document.getElementById('edit-test-data-id');

const editColumnTemplate = document.getElementById('edit-column-child-template');
const editDataTemplate = document.getElementById('edit-data-child-template');

class EditPage extends Page {
    constructor() {
        super(editPageView, 'edit', false);
        this.autoSaveId = null;

        document.getElementById('edit-add-column-button').onclick = this.addColumn.bind(this);
        document.getElementById('edit-add-data-button').onclick = this.addData.bind(this);
        document.getElementById('edit-save-button').onclick = this.saveButton.bind(this);
        document.getElementById('edit-cancel-button').onclick = this.cancelButton.bind(this);
        document.getElementById('edit-column-close-modal').onclick = this.closeColumnModal.bind(this);
        document.getElementById('edit-data-close-modal').onclick = this.closeDataModal.bind(this);

        this.columnsModalNav = new NavigationBar(document.getElementById('edit-column-nav-bar'));
        this.columnsModalNav.onfirst = this.firstColumn.bind(this); 
        this.columnsModalNav.onprevious = this.previousColumn.bind(this); 
        this.columnsModalNav.onnext = this.nextColumn.bind(this); 
        this.columnsModalNav.onlast = this.lastColumn.bind(this); 

        this.dataModalNav = new NavigationBar(document.getElementById('edit-data-nav-bar'));
        this.dataModalNav.onfirst = this.firstData.bind(this); 
        this.dataModalNav.onprevious = this.previousData.bind(this); 
        this.dataModalNav.onnext = this.nextData.bind(this); 
        this.dataModalNav.onlast = this.lastData.bind(this); 
    }

    /* When the page is loaded */
    onload() {
        var testId = currentURL.searchParams.get('test');
        if (testId == "new") {
            if (currentTest?.id != EDIT_KEY) {
                var request = DATABASE_MANAGER.getFullTest(EDIT_KEY);
                request.onsuccess = test => {
                    if (test.edit_id) {
                        this.initialiseNewTest();
                    } else {
                        currentTest = test;
                        this.loadTest();
                    }
                }

                request.onerror = this.initialiseNewTest.bind(this);
            } else if (currentTest.edit_id) {
                this.initialiseNewTest();
            } else {
                this.loadTest();
            }
        } else if (testId == "current") {
            if (currentTest?.id == EDIT_KEY) {
                this.loadTest();
            } else {
                var request = DATABASE_MANAGER.getFullTest(EDIT_KEY);
                request.onsuccess = test => {
                    currentTest = test;
                    this.loadTest();
                }
                request.onerror = backToMain;
            }
        } else {
            testId = Number(testId);
            if (testId) {
                if (currentTest?.id == EDIT_KEY) {
                    if (currentTest.edit_id == testId) {
                        this.loadTest();
                    } else {
                        this.initialiseTest(testId);
                    }
                } else {
                    var request = DATABASE_MANAGER.getFullTest(EDIT_KEY);
                    request.onsuccess = test => {
                        if (testId == test.edit_id) {
                            currentTest = test;
                            this.loadTest();
                        } else {
                            this.initialiseTest(testId);
                        }
                    }
                    request.onerror = () => this.initialiseTest(testId);
                }
            } else {
                backToMain();
            }
        }
    }

    /* When the page is updated */
    onupdate() {
        if (currentTest?.id == EDIT_KEY) {
            var testId = currentURL.searchParams.get('test');
            if (testId == "new") {
                if (testId.edit_id) {
                    this.ondelete();
                    this.onload();
                    return;
                }
            } else if (testId != "current") {
                testId = Number(testId);
                if (testId != currentTest.edit_id) {
                    this.ondelete();
                    this.onload();
                    return;
                }
            }
        } else {
            this.ondelete();
            this.onload();
            return;
        }
        this.updateModal();
    }

    /* verify if the url show any modal */
    updateModal() {
        var p = Number(currentURL.searchParams.get('column'));
        if (p) {
            if (p > currentTest.columns.length) p = currentTest.data.length;
            if (p <= 0) p = 1;
            this.updateColumnModal(p - 1);
            return;
        }

        p = Number(currentURL.searchParams.get('data'));
        if (p) {
            if (p > currentTest.data.length) p = currentTest.data.length;
            if (p <= 0) p = 1;
            this.updateDataModal(p - 1);
            return;
        }

        if (currentModal) {
            hideModal(currentModal);
            currentModal = null;
        }
    }


    /* when the page is deleted */
    ondelete() {
        if (currentTest?.id == EDIT_KEY) this.saveTest(); // save only if it's a edit test
        clearInterval(this.pageAutoSaveId);
        this.pageAutoSaveId = null;
    }

    /* create a new edit test from a test already existing */
    initialiseTest(id) {
        // TODO warning erase test
        var request = DATABASE_MANAGER.getFullTest(id);
        request.onsuccess = test => {
            currentTest = test;
            currentTest.edit_id = id;
            currentTest.id = EDIT_KEY;
            this.loadTest();
        }

        request.onerror = backToMain;
    }

    /* initialise a new test */
    initialiseNewTest() {
        currentTest = new Test(getTranslation("default-test-title"), getTranslation("default-test-description"));
        currentTest.id = EDIT_KEY;
        this.loadTest();
    }


    /* load the current test in the UI */
    loadTest() {
        // TODO
        editPageTitle.value = currentTest.title;
        editPageDescription.value = currentTest.description;

        removeAllChildren(editPageColumnsList);
        removeAllChildren(editPageDataTableHeader);
        removeAllChildren(editPageDataTableBody);

        this.onvisibilitychange(); // set auto save automatic

        var row = editDataTemplate.content.cloneNode(true);
        row.querySelector('.min').innerHTML = '<x-i18n key="edit"></x-i18n>';
        editPageDataTableHeader.appendChild(row);
        for (let i = 0; i < currentTest.columns.length; i++) {
            this.addColumnChild(i);
        }

        for (var i = 0; i < currentTest.data.length; i++) {
            this.addDataChild(i);
        }

        setPageTitle(currentTest.title);
        editPageView.classList.remove('hide');
        this.updateModal();
    }

    /* Add a column in the UI */
    addColumnChild(index) {
        var column = currentTest.columns[index];
        var e = editColumnTemplate.content.cloneNode(true);
        e.querySelector('.test-column-text').textContent = column.name;
        e.children[0].onclick = () => {
            this.columnClickCallback(index);
        };
        e.querySelector('.column-close-button').onclick = event => {
            event.stopPropagation();
            this.removeColumn(index);
        }

        editPageColumnsList.appendChild(e);

        e = document.createElement('td');
        e.textContent = column.name;
        editPageDataTableHeader.children[0].appendChild(e);
    }

    /* Update a column in the UI */
    updateColumnChild(index) {
        var column = currentTest.columns[index];
        var e = editPageColumnsList.children[index];
        e.querySelector('.test-column-text').textContent = column.name;

        e = editPageDataTableHeader.children[0].children[index + 1]; // +1 because of the min td in first place
        e.textContent = column.name;
    }

    /* remove a column in the list */
    removeColumnChild(index) {
        editPageColumnsList.removeChild(editPageColumnsList.children[index]);
        this.resetColumnsClick();
    }

    /* reset onclick events in columns when the order is modified */
    resetColumnsClick() {
        for (let i = 0; i < currentTest.columns.length; i++) {
            editPageColumnsList.children[i].onclick = () => {
                this.columnClickCallback(i);
            };
        }
    }

    /* when a column is clicked */
    columnClickCallback(id) {
        this.updateColumnModal(id);
        currentURL.searchParams.set('column', id + 1);
        history.pushState({}, '', currentURL);
    }

    /* Add a data in the UI */
    addDataChild(index) {
        var row = editDataTemplate.content.cloneNode(true);
        var e;
        for (var j = 0; j < currentTest.data[index].length; j++) {
            e = document.createElement('td');
            e.appendChild(currentTest.columns[j].getViewView(currentTest.data[index][j]));
            row.children[0].appendChild(e);
        }
        row.children[0].onclick = () => {
            this.dataClickCallback(index);
        }
        row.querySelector('.data-delete-button').onclick = event => {
            event.stopPropagation();
            this.removeData(index);
        }
        editPageDataTableBody.appendChild(row);
    }

    /* Update a data in the UI */
    updateDataChild(index) {
        var row = editPageDataTableBody.children[index];
        var e;
        for (var j = 0; j < currentTest.columns.length; j++) {
            e = row.children[j + 1]; // +1 because of the min td at first
            e.replaceChild(currentTest.columns[j].getViewView(currentTest.data[index][j]), e.children[0]);
        }
    }

    /* Update a data in the UI */
    removeDataChild(index) {
        editPageDataTableBody.removeChild(editPageDataTableBody.children[index]);
        this.resetDataClick();
    }

    /* reset onclick events in data when the order is modified */
    resetDataClick() {
        for (let i = 0; i < currentTest.data.length; i++) {
            editPageDataTableBody.children[i].onclick = () => {
                this.dataClickCallback(i);
            };
            editPageDataTableBody.children[i].querySelector('.data-delete-button').onclick = event => {
                event.stopPropagation();
                this.removeData(i);
            }
        }
    }

    /* reload the entire UI of the data set */
    reloadData() {
        removeAllChildren(editPageDataTableHeader);
        removeAllChildren(editPageDataTableBody);

        var e;
        var row = editDataTemplate.content.cloneNode(true);
        row.querySelector('.min').innerHTML = '<x-i18n key="edit"></x-i18n>';
        for (var i = 0; i < currentTest.columns.length; i++) {
            e = document.createElement('td');
            e.textContent = currentTest.columns[i].name;
            row.children[0].appendChild(e);
        }
        editPageDataTableHeader.appendChild(row);

        for (var i = 0; i < currentTest.data.length; i++) {
            this.addDataChild(i);
        }
    }

    /* when a data is clicked */
    dataClickCallback(id) {
        this.updateDataModal(id);
        currentURL.searchParams.set('data', id + 1);
        history.pushState({}, '', currentURL);
    }

    /* when the visibility of the page change */
    onvisibilitychange() {
        if (document.hidden) {
            this.saveTest();
            clearInterval(this.pageAutoSaveId);
            this.pageAutoSaveId = null;
        } else {
            this.pageAutoSaveId = setInterval(this.saveTest.bind(this), EDIT_AUTO_SAVE_TIME);
        }
    }

    /* when a key is press */
    onkeydown(event) {
        switch (event.keyCode) {
            case KeyboardEvent.DOM_VK_ESCAPE:
                if (currentModal == 'edit-test-column') {
                    this.closeColumnModal();
                } else if (currentModal == 'edit-test-data') {
                    this.closeDataModal();
                } else {
                    backToMain(true);
                }
                event.preventDefault();
                break;

            case KeyboardEvent.DOM_VK_RIGHT:
                if (!event.altKey) return;
                if (currentModal == 'edit-test-column') {
                    this.nextColumn();
                    event.preventDefault();
                } else if (currentModal == 'edit-test-data') {
                    this.nextData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_LEFT:
                if (!event.altKey) return;
                if (currentModal == 'edit-test-column') {
                    this.previousColumn();
                    event.preventDefault();
                } else if (currentModal == 'edit-test-data') {
                    this.previousData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_PAGE_DOWN:
                if (!event.altKey) return;
                if (currentModal == 'edit-test-column') {
                    this.lastColumn();
                    event.preventDefault();
                } else if (currentModal == 'edit-test-data') {
                    this.lastData();
                    event.preventDefault();
                }
                break;

            case KeyboardEvent.DOM_VK_PAGE_UP:
                if (!event.altKey) return;
                if (currentModal == 'edit-test-column') {
                    this.firstColumn();
                    event.preventDefault();
                } else if (currentModal == 'edit-test-data') {
                    this.firstData();
                    event.preventDefault();
                }
                break;
        }
    }


    /* save the edited test */
    saveTest() {
        currentTest.title = editPageTitle.value;
        currentTest.description = editPageDescription.value;

        if (currentModal == 'edit-test-column') this.applyColumnModal();
        else if (currentModal == 'edit-test-data') this.applyDataModal();

        DATABASE_MANAGER.updateTest(currentTest);
    }

    /* save the current data in modals */
    applyColumnModal() {
        console.assert(currentModal == 'edit-test-column', "The edit test modal must be column");
        var column = currentTest.columns[currentState.id];
        column.name = editColumnModalTitle2.value;
        column.description = editColumnModalDescription.value;

        column.setEditColumnSettings(editColumnModalSettings);

        this.updateColumnChild(currentState.id);
    }

    applyDataModal() {
        console.assert(currentModal == 'edit-test-data', "The edit test modal must be data");
        var row = currentTest.data[currentState.id];
        for (var i = 0; i < currentTest.columns.length; i++) {
            currentTest.columns[i].setValueFromView(row[i], editDataModalContent.children[i * 2 + 1]);
        }
        this.updateDataChild(currentState.id);
    }

    /* callback for the cancel button */
    cancelButton() {
        var id = currentTest.edit_id;
        currentTest = null;
        DATABASE_MANAGER.deleteTest(EDIT_KEY);
        if (id) viewTestPage(id);
        else backToMain(true);
    }

    saveButton() {
        this.saveTest();
        currentTest.registerModificationDate();
        if (currentTest.edit_id) {
            currentTest.id = currentTest.edit_id;
            delete currentTest.edit_id;
            DATABASE_MANAGER.updateTest(currentTest).onsuccess = event => {
                viewTestPage(event.target.result);
            };
            DATABASE_MANAGER.deleteTest(EDIT_KEY);
        } else {
            delete currentTest.id;
            DATABASE_MANAGER.addNewTest(currentTest).onsuccess = event => {
                viewTestPage(event.target.result);
            };
            DATABASE_MANAGER.deleteTest(EDIT_KEY);
        }
    }

    /* add a column */
    addColumn() {
        var pos = currentTest.addColumn(new ColumnString(getTranslation("default-column-title")));
        this.addColumnChild(pos);
        this.updateColumnModal(pos);
        this.reloadData();
    }

    /* remove a column */
    removeColumn(index) {
        currentTest.removeColumn(index);
        this.removeColumnChild(index);
        this.reloadData();
    }

    /* add a data */
    addData() {
        var pos = currentTest.addData();
        this.addDataChild(pos);
        this.updateDataModal(pos);
    }

    /* remove a data */
    removeData(index) {
        currentTest.removeData(index);
        this.removeDataChild(index);
    }

    /* update the modal from an id */
    updateColumnModal(id) {
        if (currentModal != "edit-test-column") {
            currentModal = "edit-test-column";
            showModal(currentModal);
            currentState.id = -1;
        }
        if (currentState.id != id) {
            if (currentState.id >= 0) this.applyColumnModal();
            currentState.id = id;
            
            var column = currentTest.columns[id];
            editColumnModalTitle1.textContent = column.name;
            editColumnModalTitle2.value = column.name;
            editColumnModalDescription.value = column.description;

            editColumnModalSettings.replaceChild(
                column.getEditColumnSettings(),
                editColumnModalSettings.children[0]
            );
        }
    }

    /* go to the next column */
    nextColumn() {
        if (currentState.id < currentTest.columns.length - 1) {
            this.updateColumnModal(currentState.id + 1); // don't add to history in order to not spam the history 
        }
    }

    /* go to the first column */
    firstColumn() {
        this.updateColumnModal(0);
    }

    /* go to the previous column*/
    previousColumn() {
        if (currentState.id > 0) {
            this.updateColumnModal(currentState.id - 1);
        }
    }

    /* go to the last column*/
    lastColumn() {
        this.updateColumnModal(currentTest.columns.length - 1);
    }

    /* close the column modal */
    closeColumnModal() {
        // TODO save
        this.applyColumnModal();
        currentURL.searchParams.delete('column');
        history.pushState({}, '', currentURL);
        hideModal(currentModal);
        currentModal = null;
    }

    /* update the modal of data */
    updateDataModal(id) {
        if (currentModal != "edit-test-data") {
            currentModal = "edit-test-data";
            showModal(currentModal);
            currentState.id = -1;
        }
        if (currentState.id != id) {

            if (currentState.id >= 0) this.applyDataModal();
            currentState.id = id;

            var row = currentTest.data[id];
            editDataModalId.textContent = id + 1;
            removeAllChildren(editDataModalContent);
            var e;
            var column;
            for (var i = 0; i < row.length; i++) {
                column = currentTest.columns[i];
                e = document.createElement('h3');
                e.textContent = column.name + ":";
                e.classList = ['no-margin']
                editDataModalContent.appendChild(e);

                editDataModalContent.appendChild(column.getEditView(row[i]));
            }
        }
    }

    /* go to the next data*/
    nextData() {
        if (currentState.id < currentTest.data.length - 1) {
            this.updateDataModal(currentState.id + 1);
        }
    }

    /* go to the previous data */
    previousData() {
        if (currentState.id > 0) {
            this.updateDataModal(currentState.id - 1);
        }
    }

    /* go to the first data */
    firstData() {
        this.updateDataModal(0);
    }

    /* go to the last edit data */
    lastData() {
        this.updateDataModal(currentTest.data.length - 1);
    }

    /* close the data modal */
    closeDataModal() {
        this.applyDataModal();
        currentURL.searchParams.delete('data');
        history.pushState({}, '', currentURL);
        hideModal(currentModal);
        currentModal = null;
    }
}

PAGES.edit = new EditPage();


/* ########################## res/js/pages/index/play.js ##########################*/

const playPageView = document.getElementById('play-page');

const playPageTestTitle = document.getElementById('play-test-title');
const playPageInputs = document.getElementById('play-inputs');
const playPageContinueButtonText = document.getElementById('play-continue-button-text');

const playProgressBar = document.getElementById('play-progress');
const playProgressIndex = document.getElementById('play-progress-index');
const playProgressMax = document.getElementById('play-progress-max');

/* A score context that hold the score of the session */
class ScoreContext {
    /* initialise */
    constructor() {
        this.score = 0;
        this.max = 0;
    }

    /* start a new session */
    reset() {
        this.score = 0;
        this.max = 0;
    }

    /* add a score */
    pushScore(score, max) {
        this.score += score;
        this.max += max;
    }
}

class PlayPage extends Page {
    constructor() {
        super(playPageView, "play", true);

        // define test context
        this.dataNumberToDo = null;
        this.numberColumnsRandomReveal = null;
        this.currentIndex = null;
        this.dataIndexes = null;
        this.answerIsShow = false;
        this.columnsAsked = null;
        this.score = new ScoreContext();
        this.playInputs = [];
        this.randomInputs = 0;

        document.getElementById('play-form').onsubmit = this.submitCallback.bind(this);
    }

    onload() {
        this.dataNumberToDo = currentURL.searchParams.get("data")?.split('-') ?? [];
        this.numberColumnsRandomReveal = Number(currentURL.searchParams.get("columns"));

        if (!Number.isInteger(this.numberColumnsRandomReveal)) {
            backToMain();
            return;
        }

        if (this.dataNumberToDo.length == 1) {
            this.dataNumberToDo = clamp(Number(this.dataNumberToDo[0]), 1, currentTest.data.length);
            if (!this.dataNumberToDo) {
                backToMain();
                return;
            }
        } else if (this.dataNumberToDo.length >= 2) {
            this.dataNumberToDo = [Number(this.dataNumberToDo[0]), Number(this.dataNumberToDo[1])]
            if (this.dataNumberToDo[0] && this.dataNumberToDo[1]) {
                this.dataNumberToDo = clamp(
                    Math.round(this.dataNumberToDo[0] * currentTest.data.length / this.dataNumberToDo[1]),
                    1, currentTest.data.length
                );
            } else {
                backToMain();
                return;
            }
        } else {
            backToMain();
            return;
        }

        this.numberColumnsRandomReveal = clamp(this.numberColumnsRandomReveal, 0, currentTest.columns.length - 1);

        this.currentIndex = 0;
        this.answerIsShow = false;
        this.dataIndexes = randomUniqueNumberList(this.dataNumberToDo, currentTest.data.length);

        this.score.reset();

        this.initialise();

        playPageView.classList.remove('hide');
        setPageTitle(currentTest.title);
    }

    /* when a key is press */
    onkeydown(event) {
        if (event.keyCode === KeyboardEvent.DOM_VK_RETURN) {
            this.submitCallback(event);
        }
    }

    /* initialise the UI */
    initialise() {
        removeAllChildren(playPageInputs);

        playPageTestTitle.textContent = currentTest.title;
        playProgressMax.textContent = this.dataNumberToDo;
        this.playInputs = [];
        this.randomInputs = 0;

        var show_only = 0;
        var ask_only = 0;

        var e;
        var c;
        var p;
        var set_show;
        var set_ask;
        var is_random;
        for (var i = 0; i < currentTest.columns.length; i++) {
            c = currentTest.columns[i];

            set_show = c.getSettings(Column.SET_CAN_BE_SHOW);
            set_ask = c.getSettings(Column.SET_CAN_BE_ASK);

            if (set_show || set_ask) {
                is_random = set_show && set_ask;
                e = document.createElement('h3');
                e.classList = ['no-margin'];
                e.textContent = c.name;
                playPageInputs.appendChild(e);
                e = document.createElement('div');
                this.playInputs.push(new PlayInput(i, c, e, set_show, set_ask, is_random));
                playPageInputs.appendChild(e); // setup a dummy element

                if (is_random) this.randomInputs++;
                else if (set_show) {
                    show_only++;
                }
                else {
                    this.numberColumnsRandomReveal--;
                    ask_only++;
                }
            }
        }

        this.numberColumnsRandomReveal = clamp(
            this.numberColumnsRandomReveal, 
            show_only ? 0 : 1,
            ask_only ? this.randomInputs : this.randomInputs - 1
        );

        this.update();
    }

    /* update the UI */
    update(applyScore = false) {
        var row = currentTest.data[this.dataIndexes[this.currentIndex]];
        
        if (this.answerIsShow) {
            var j = 0;
            var score = applyScore ? this.score : null;
            for (var i = 0; i < this.playInputs.length; i++) {
                if (this.playInputs[i].set_ask) {
                    if (!this.playInputs[i].is_random || this.columnsAsked[j++]) {
                        this.playInputs[i].showAnswer(row, score);
                    }
                }
                // if (this.columnsAsked[i]) {
                //     playPageInputs.replaceChild(
                //         currentTest.columns[i].updateAnswerTestView(
                //             row[i],  
                //             playPageInputs.children[i * 2 + 1],
                //             score),
                //         playPageInputs.children[i * 2 + 1]
                //     );
                // }                
            }
            playPageContinueButtonText.setAttribute('key', 'continue');
            playProgressBar.value = (this.currentIndex + 1) / this.dataNumberToDo;
            playProgressIndex.textContent = this.currentIndex + 1; // humanify
        } else {
            this.columnsAsked = new Array(currentTest.columns.length).fill(true);
            var i = this.numberColumnsRandomReveal;
            var j;
            while (i > 0) {
                j = randint(this.randomInputs);
                if (this.columnsAsked[j]) {
                    i--;
                    this.columnsAsked[j] = false;
                }
            }
            j = 0;
            for (var i = 0; i < this.playInputs.length; i++) {
                if (this.playInputs[i].is_random) {
                    if (this.columnsAsked[j++]) {
                        this.playInputs[i].ask(row);
                    } else {
                        this.playInputs[i].show(row);
                    }
                } else if (this.playInputs[i].set_ask) {
                    this.playInputs[i].ask(row);
                } else if (this.playInputs[i].set_show) {
                    this.playInputs[i].show(row);
                }
                // if (this.columnsAsked[i]) {
                //     playPageInputs.replaceChild(currentTest.columns[i].getTestView(row[i]), playPageInputs.children[i * 2 + 1]);
                // } else {
                //     playPageInputs.replaceChild(currentTest.columns[i].getViewView(row[i]), playPageInputs.children[i * 2 + 1]);
                // }
            }
            playPageContinueButtonText.setAttribute('key', 'valid');
            var i = 0;
            while ((
                    (this.playInputs[i].is_random && !this.columnsAsked[j++]) || 
                    this.playInputs[i].set_ask) && 
                ++i < this.playInputs.length - 1) {}
            playPageInputs.children[i * 2 + 1].focus();
 
            playProgressBar.value = this.currentIndex / this.dataNumberToDo;
            playProgressIndex.textContent = this.currentIndex + 1; // humanify
        }
    }

    /* callback for the submit form */
    submitCallback(event) {
        event.preventDefault();

        if (this.answerIsShow) {
            this.answerIsShow = false;
            if (++this.currentIndex >= this.dataNumberToDo) {
                playScorePage.setScore(this.score);
                setPage(playScorePage);
            } else {
                this.update();
            }
        } else {
            this.answerIsShow = true;
            this.update(true);
        }
    }
}

class PlayInput {
    constructor(index, column, view, set_show, set_ask, is_random) {
        this.index = index;
        this.column = column;
        this.view = view;
        this.set_show = set_show;
        this.set_ask = set_ask;
        this.is_random = is_random;
    }

    /* ask the input */
    ask(row) {
        var e = this.column.getTestView(row[this.index]);
        playPageInputs.replaceChild(
            e,
            this.view
        );
        this.view = e;
    }

    /* show the input */
    show(row) {
        var e = this.column.getViewView(row[this.index]);
        playPageInputs.replaceChild(
            e,
            this.view
        );
        this.view = e;
    }

    /* show the answer */
    showAnswer(row, score) {
        var e = this.column.updateAnswerTestView(row[this.index], this.view, score);
        playPageInputs.replaceChild(
            e,
            this.view
        );
        this.view = e;
    }
}

PAGES.play = new PlayPage();

/* ##################### res/js/pages/index/play-settings.js ######################*/

const playSetPageView = document.getElementById('play-settings-page');

const playSetPageTestTitle = document.getElementById('play-set-test-title');
const playSetPageStartButton = document.getElementById('play-set-start-button');

const playSetPageNumberData = document.getElementById('play-set-number-data');
const playSetPageNumberColumns = document.getElementById('play-set-number-column');
const playSetPageNumberColumnsMax = document.getElementById('play-set-number-column-max');

class PlaySettingsPage extends Page {

    constructor() {
        super(playSetPageView, "play-settings", true);
        this.currentTestId = -1;

        document.getElementById('play-set-form').onsubmit = this.playTest.bind(this);
    }

    onload() {
        if (!currentTest.isPlayable()) {
            backToMain(); // TODO dialog
            return;
        } 

        playSetPageTestTitle.textContent = currentTest.title;

        this.setMinMaxColumns();

        var maxData = currentTest.data.length;
        var d;
        for (var i = 0; i < playSetPageNumberData.options.length; i++) {
            d = Number(playSetPageNumberData.options[i].value);
            if (d && d > maxData) {
                playSetPageNumberData.options[i].disabled = true;
            }
        }

        playSetPageView.classList.remove('hide');
        setPageTitle(currentTest.title);
    }

    /* set the minimum and the maximum of the columns input */
    setMinMaxColumns() {
        var min = 0;
        var max = 0; // a column must be show
        var askOnly = false;
        var columnCount = 0;
        var c;
        for (var i = 0; i < currentTest.columns.length; i++) {
            c = currentTest.columns[i];
            if (c.getSettings(Column.SET_CAN_BE_ASK)) {
                if (c.getSettings(Column.SET_CAN_BE_SHOW)) {
                    max++;
                } else {
                    askOnly = true;                    
                }     
                columnCount++;
            } else if (c.getSettings(Column.SET_CAN_BE_SHOW)) {
                min++;
                max++;
                columnCount++;
            }
        }

        if (!askOnly) {
            max--;
        }
        if (min <= 0)
            min = 1;

        playSetPageNumberColumns.min = min;
        playSetPageNumberColumns.max = max;
        playSetPageNumberColumnsMax.textContent = columnCount;
    }

    /* play the test */
    playTest(event) {
        event.preventDefault(); // prevent send of form
        
        currentURL.searchParams.set("page", "play");
        currentURL.searchParams.set("data", playSetPageNumberData.value);
        currentURL.searchParams.set("columns", playSetPageNumberColumns.value);
        history.pushState({}, "Play", currentURL);
        loadPage();
    }
}

PAGES.play_settings = new PlaySettingsPage();

/* ####################### res/js/pages/index/play-score.js #######################*/

const MARK_20_FORMATER = new Intl.NumberFormat(navigator.language, {
    minimumIntegerDigits: 1,
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
});

const MARK_100_FORMATER = new Intl.NumberFormat(navigator.language, {
    style: "percent",
    minimumIntegerDigits: 1,
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
});


const playScoreView = document.getElementById('play-score-page');
const playScoreProgress = document.getElementById('play-score-progress');
const playScoreMajor = document.getElementById('play-score-major');
const playScoreMinor = document.getElementById('play-score-minor');

class PlayScorePage extends Page {
    constructor() {
        super(playScoreView, 'play-score', true);
        document.getElementById('play-score-restart').onclick = loadPage;
        document.getElementById('play-score-menu').onclick = () => backToMain(false);
    }

    onload() {
        playScoreView.classList.remove('hide');
    }

    setScore(scoreContext) {
        playScoreProgress.value = scoreContext.score / scoreContext.max;

        playScoreMajor.textContent = this.format20(scoreContext.score, scoreContext.max);
        playScoreMinor.textContent = this.formatNormal(scoreContext.score, scoreContext.max);
    }

    format20(score, max) {
        return MARK_20_FORMATER.format(score / max * 20) + ' / 20'; 
    }

    format100(score, max) {
        return MARK_100_FORMATER.format(score / max); 
    }

    formatNormal(score, max) {
        return score + ' / ' + max;
    }
}

const playScorePage = new PlayScorePage(); // internal page, not accesible via URL