

/* ############################# res/js/pages/page.js #############################*/

class Page {
    constructor(pageView, pageName, requireTest, onload, onupdate, ondelete, onkeydown) {
        this.page = pageView;
        this.pageName = pageName;
        this.onload = onload;
        this.onupdate = onupdate;
        this.ondelete = ondelete;
        this.requireTest = requireTest;
        this.onkeydown = onkeydown;
    }

    hidePage() {
        this.page?.classList.add('hide');
    }
}

/* ############################# res/js/pages/main.js #############################*/

const MAIN_URL = "/WebDiakoluo/index.html"

var PAGES = {};

var currentURL = new URL(window.location)
var currentPage = new Page(null, null);
var currentPageName = null;
var currentTest = null;
var currentModal = null;
var currentState = {};

/* init navigation */
function initNavigation() {
    window.onpopstate = function() {
        loadPage();
    }
    document.getElementById('loading-page').classList.add('hide');
    loadPage();
}

/* load a page / process the ur l*/
function loadPage() {
    currentURL = new URL(window.location);
    var page = currentURL.searchParams.get('page');
    if (page && currentPage.name == page) {
        if (currentPage.onupdate) {
            if (currentPage.requireTest) loadPageRequiringTest(page, true);
            else currentPage.onupdate?.();
        }
    } else {
        currentPage.hidePage();
        if (currentModal) {
            hideModal(currentModal); 
            currentModal = null;
        }
        currentState = {};

        currentPage = PAGES[page] || defaultPage;
        if (currentPage.requireTest) {
            loadPageRequiringTest();
        } else {
            currentPage.onload?.();
        }
    }
}

function onkeydown(event) {
    currentPage.onkeydown?.(event);
}
document.onkeydown = onkeydown;

/* load a page that require a test */
function loadPageRequiringTest(page, update = false) {
    var testId = Number(currentURL.searchParams.get('test'));
    if (testId) {
        if (!currentTest || testId != currentTest.id) {
            var request = getFullTest(testId);
            request.onsuccess = function(test) {
                currentTest = test;
                currentPage.onload?.();
            };
            request.onerror = function(event) {
                backToList();
            };
            currentState = {};
        } else {
            if (update) {
                currentPage.onupdate?.();
            } else {
                currentPage.onload?.();
            }
        }
    } else {
        backToList();
    }
}

/* return to the list if an error occur for example */
function backToList(newState = false) {
    if (newState) {
        window.history.pushState({}, 'Main page', MAIN_URL);
    } else {
        window.history.replaceState({}, 'Main page', MAIN_URL);
    }
    loadPage();
}

testDBCallbacks.push(initNavigation);

/* ########################## res/js/pages/index/list.js ##########################*/

const listPageView = document.getElementById('list-page');
const listPageTestList = document.getElementById('list-test');

const testListTemplate = document.getElementById('list-test-child-template');

const defaultPage = new Page(listPageView, "", false, loadListPage);

function reloadTestList() {
    removeAllChildren(listPageTestList);
    forEachHeader().onsuccess = function(event) {
        var cursor = event.target.result;
        if (cursor) {
            var t = testListTemplate.content.cloneNode(true);
            var v = cursor.value;
            var id = cursor.value.id;
            t.querySelector('.test-title').textContent = v.title;
            t.querySelector('.test-description').textContent = v.description;
            t.children[0].onclick = function() {
                currentURL.searchParams.set('page', 'view');
                currentURL.searchParams.set('test', id);
                window.history.pushState({}, 'View page', currentURL);
                loadPage();
            }
            listPageTestList.appendChild(t);
            cursor.continue();
        }
    };
}

function loadListPage() {
    listPageView.classList.remove('hide');
    updatePageTitle('title-index.html');
    reloadTestList();
}

/* ########################## res/js/pages/index/view.js ##########################*/

const viewPageView = document.getElementById('view-page');

const viewPageTitle = [document.getElementById('view-test-title'), document.getElementById('view-test-title2')];
const viewPageDescription = document.getElementById('view-test-description');
const viewPageCreatedDate = document.getElementById('view-test-created-date');
const viewPageModificationDate = document.getElementById('view-test-modification-date');
const viewPageColumnsList = document.getElementById('view-test-columns');
const viewPageDataTableHeader = document.getElementById('view-test-data-header');
const viewPageDataTableBody = document.getElementById('view-test-data-body');

const viewColumnModalTitle1 = document.getElementById('modal-view-column-title1');
const viewColumnModalTitle2 = document.getElementById('modal-view-column-title2');
const viewColumnModalDescription = document.getElementById('modal-view-column-description');

const viewDataModalContent = document.getElementById('view-test-data-content');
const viewDataModalId = document.getElementById('view-test-data-id');

const columnTemplate = document.getElementById('view-column-child-template');
const dataTemplate = document.getElementById('view-data-child-template');

PAGES.view = new Page(viewPageView, "view", true, loadViewPage, updateViewPage, null, onkeydownViewPage);

function loadViewPage() {
    for (var i = 0; i < viewPageTitle.length; i++) {
        viewPageTitle[i].textContent = currentTest.title;
    }
    viewPageDescription.textContent = currentTest.description;
    viewPageCreatedDate.textContent = DATE_FORMATER.format(currentTest.createdDate);
    viewPageModificationDate.textContent = DATE_FORMATER.format(currentTest.modificationDate);
    viewPageView.classList.remove('hide');

    removeAllChildren(viewPageColumnsList);
    removeAllChildren(viewPageDataTableHeader);
    removeAllChildren(viewPageDataTableBody);
    var e;
    var row = dataTemplate.content.cloneNode(true);
    row.querySelector('.min').innerHTML = '<x-i18n key="view"></x-i18n>';
    for (let i = 0; i < currentTest.columns.length; i++) {
        e = columnTemplate.content.cloneNode(true);
        e.querySelector('.test-column-text').textContent = currentTest.columns[i].name;
        e.children[0].onclick = function() {
            viewColumnClickCallback(i);
        };

        viewPageColumnsList.appendChild(e);

        e = document.createElement('td');
        e.textContent = currentTest.columns[i].name;
        row.children[0].appendChild(e);
    }
    viewPageDataTableHeader.appendChild(row);

    for (let i = 0; i < currentTest.data.length; i++) {
        row = dataTemplate.content.cloneNode(true);
        for (var j = 0; j < currentTest.data[i].length; j++) {
            e = document.createElement('td');
            e.textContent = currentTest.columns[j].getDataValueString(currentTest.data[i][j]);
            row.children[0].appendChild(e);
        }
        row.children[0].onclick = function() {
            viewDataClickCallback(i);
        }
        viewPageDataTableBody.appendChild(row);
    }

    setPageTitle(currentTest.title);
    updateViewPage();
}

function updateViewPage() {
    var p = Number(currentURL.searchParams.get('column'));
    if (p) {
        if (p > currentTest.columns.length) p = currentTest.data.length;
        if (p <= 0) p = 1;
        updateViewColumnModal(p - 1);
        return;
    }

    p = Number(currentURL.searchParams.get('data'));
    if (p) {
        if (p > currentTest.data.length) p = currentTest.data.length;
        if (p <= 0) p = 1;
        updateViewDataModal(p - 1);
        return;
    }

    if (currentModal) {
        hideModal(currentModal);
        currentModal = null;
    }
}

function onkeydownViewPage(event) {
    switch (event.keyCode) {
        case KeyboardEvent.DOM_VK_ESCAPE:
            if (currentModal == 'view-test-column') {
                closeViewColumnModal();
            } else if (currentModal == 'view-test-data') {
                closeViewDataModal();
            } else {
                backToList();
            }
            event.preventDefault();
            break;

        case KeyboardEvent.DOM_VK_RIGHT:
            if (currentModal == 'view-test-column') {
                nextViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                nextViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_LEFT:
            if (currentModal == 'view-test-column') {
                previousViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                previousViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_PAGE_DOWN:
            if (currentModal == 'view-test-column') {
                lastViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                lastViewData();
                event.preventDefault();
            }
            break;

        case KeyboardEvent.DOM_VK_PAGE_UP:
            if (currentModal == 'view-test-column') {
                firstViewColumn();
                event.preventDefault();
            } else if (currentModal == 'view-test-data') {
                firstViewData();
                event.preventDefault();
            }
            break;
    }
}

function updateViewColumnModal(id) {
    if (currentModal != "view-test-column") {
        currentModal = "view-test-column";
        showModal(currentModal);
        currentState.id = -1;
    }
    if (currentState.id != id) {
        currentState.id = id;
        
        var column = currentTest.columns[id];
        viewColumnModalTitle1.textContent = column.name;
        viewColumnModalTitle2.textContent = column.name;
        viewColumnModalDescription.textContent = column.description;
    }
}

function updateViewDataModal(id) {
    if (currentModal != "view-test-data") {
        currentModal = "view-test-data";
        showModal(currentModal);
        currentState.id = -1;
    }
    if (currentState.id != id) {
        currentState.id = id;

        var row = currentTest.data[id];
        viewDataModalId.textContent = id + 1;
        removeAllChildren(viewDataModalContent);
        var e;
        var column;
        for (var i = 0; i < row.length; i++) {
            column = currentTest.columns[i];
            e = document.createElement('h3');
            e.textContent = column.name + ":";
            e.classList = ['no-margin']
            viewDataModalContent.appendChild(e);

            e = document.createElement('div');
            e.textContent = column.getDataValueString(row[i]);
            viewDataModalContent.appendChild(e);
        }
    }
}

function viewColumnClickCallback(id) {
    updateViewColumnModal(id);
    currentURL.searchParams.set('column', id + 1);
    history.pushState({}, '', currentURL);
}

function nextViewColumn() {
    if (currentState.id < currentTest.columns.length - 1) {
        updateViewColumnModal(currentState.id + 1); // don't add to history in order to not spam the history 
    }
}

function previousViewColumn() {
    if (currentState.id > 0) {
        updateViewColumnModal(currentState.id - 1);
    }
}

function firstViewColumn() {
    updateViewColumnModal(0);
}

function lastViewColumn() {
    updateViewColumnModal(currentTest.columns.length - 1);
}

function viewDataClickCallback(id) {
    updateViewDataModal(id);
    currentURL.searchParams.set('data', id + 1);
    history.pushState({}, '', currentURL);
}

function nextViewData() {
    if (currentState.id < currentTest.data.length - 1) {
        updateViewDataModal(currentState.id + 1);
    }
}

function previousViewData() {
    if (currentState.id > 0) {
        updateViewDataModal(currentState.id - 1);
    }
}

function firstViewData() {
    updateViewDataModal(0);
}

function lastViewData() {
    updateViewDataModal(currentTest.data.length - 1);
}

function closeViewColumnModal() {
    currentURL.searchParams.delete('column');
    history.pushState({}, '', currentURL);
    hideModal(currentModal);
    currentModal = null;
}

function closeViewDataModal() {
    currentURL.searchParams.delete('data');
    history.pushState({}, '', currentURL);
    hideModal(currentModal);
    currentModal = null;
}

/* ########################## res/js/pages/index/edit.js ##########################*/

const editPageView = document.getElementById('edit-page');


PAGES.edit = new Page(editPageView, loadEditPage, false);

function loadEditPage() {
    editPageView.classList.remove('hide');
}