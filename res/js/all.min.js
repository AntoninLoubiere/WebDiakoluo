

/* ############################# res/js/base/i18n.js ##############################*/

const LANGUAGES = ['en', 'fr'];
const LANGUAGES_BUTTONS = {'en': "&#127468;&#127463; English", 'fr': "&#127467;&#127479; Français"};
const PATH_OFFSET = 13;
const DEFAULT_LANGUAGE = 'en2';
const DATE_FORMATER = new Intl.DateTimeFormat(navigator.language, {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
});

const languageSelector = document.getElementById("language-selector");
const EXCEPT_TITLE_PATH = ['/WebDiakoluo/', '/WebDiakoluo/index.html'];

/*
Custom element that hold a translation.
*/
class I18nElement extends HTMLElement {
    static get observedAttributes() { return ['key', 'caps']; }

    constructor() {
        super();
        this.textContent = this.getAttribute('key');
    }

    /* Update the translation */
    updateI18n() {
        if (I18N.universal == null || I18N.translations == null) return;
        var tr = I18N.getTranslation(this.getAttribute('key'))
        var caps = this.getAttribute('caps')
        if (caps == 'upper') this.innerHTML = tr.toUpperCase();
        else if (caps == 'lower') this.innerHTML = tr.toLowerCase();
        else this.innerHTML = tr;
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'key' && newValue != null || name == 'caps') {
            this.updateI18n();
        }
    }
}

class I18NClass {

    /* Return the lang detected from the navigator */
    static detectLang() {
        for (var i = 0; i < navigator.languages.length; i++) {
            for (var j = 0; j < LANGUAGES.length; j++) {
                if (navigator.languages[i].toLowerCase() == LANGUAGES[j] || navigator.languages[i].substring(0, 2).toLowerCase() == LANGUAGES[j]) {
                    return LANGUAGES[j];
                }
            }
        }
        return DEFAULT_LANGUAGE; // by default return en
    }

    constructor() {
        this.translations = null;
        this.universal = null;
    }

    /* Initialise the module */
    async initialise() {
        customElements.define('x-i18n', I18nElement);

        const universalFun = this.getUniversal();

        let lang = localStorage.getItem("lang");
        if (lang == null) {
            lang = I18NClass.detectLang();    
        }

        const langFun = this.setLang(lang);

        addManifest(lang);
        this.createLangSelector();
        
        await langFun;
        await universalFun;
        this.updateAll();
    }

    createLangSelector() {
        let parent = document.getElementById('language-selector-childs');
        for (var i = 0; i < LANGUAGES.length; i++) {
            let lang = LANGUAGES[i];
            let button = document.createElement('div');
            button.classList = ['selector-dropdown-child'];
            button.innerHTML = LANGUAGES_BUTTONS[lang];
            button.setAttribute('lang', lang)
            button.tabIndex = 0;
            button.onclick = () => {
                this.setLang(lang, false).then(this.updateAll.bind(this));
                languageSelector.textContent = button.textContent;
                if (cookiesConsent) localStorage.setItem("lang", lang);
            }
            button.onkeydown = onReturnClick;
            parent.appendChild(button);
        }
    }

    /* Set a new lang */
    async setLang(lang, updateButton=true) {
        return new Promise((resolve, reject) => {
            let request = new XMLHttpRequest();
            request.open('GET', '/WebDiakoluo/res/translations/' + lang + '.json');
            request.responseType = 'json';
            request.send();

            request.onload = () => {
                if (request.response == null) {
                    this.langError(lang).then(resolve).catch(reject);
                } else {
                    this.translations = request.response
                    if (updateButton) {
                        languageSelector.textContent = document.querySelector("[lang=" + lang + "]").textContent;
                    }
                    resolve();
                }
            }

            request.onerror = () => this.langError(lang).then(resolve).catch(reject);
        });
    }

    /* load universal translations */
    async getUniversal() {
        return new Promise((resolve, reject) => {
            let request = new XMLHttpRequest();
            request.open('GET', '/WebDiakoluo/res/translations/universal.json');
            request.responseType = 'json';
            request.send();

            request.onload = () => {
                this.universal = request.response;
                console.info("Diakôluô version id :", this.universal['id']);
                resolve();
            }

            request.onerror = reject;
        });
    }

    /* When an error occur while importing translations */
    async langError(lang) {
        console.error("Can't load the language:", lang)
        if (this.translations == null) {
            let l = I18NClass.detectLang();
            if (l == lang) {
                if (lang == DEFAULT_LANGUAGE) {
                    console.error("FATAL ERROR: can't load default language !")
                } else {
                    return await this.setLang(DEFAULT_LANGUAGE);
                }
            } else {
                return await this.setLang(l);                
            }
        }
    }

    /* get a translations in the current language */
    getTranslation(key, warn=true) {
        let tr = this.translations[key];
        if (tr != undefined) {
            return tr;
        } else {
            tr = this.universal[key];
            if (tr == undefined) {
                if (warn) console.warn("A key isn't available in this language !", key);
                return key;
            } else {
                return tr;
            }
        }
    }

    /* Update all translations in the page */
    updateAll() {
        let i18n = document.getElementsByTagName('x-i18n');
        for (var i = 0; i < i18n.length; i++) {
            i18n[i].updateI18n();
        }
        
        this.updatePageTitle();
    }

    /* update page title */
    updatePageTitle(id = null) {
        console.assert(this.translations != null, "Translations aren't loaded yet");
        if (EXCEPT_TITLE_PATH.indexOf(document.location.pathname) < 0) {
            // get the title from the translations list
            var title;
            if (id) {
                title = this.getTranslation(id);
            } else {
                let path = document.location.pathname.substring(PATH_OFFSET);
                title = this.getTranslation('title-' + path, false);
                if (title == undefined) {
                    title = this.getTranslation('title-' + path + 'index.html', false);
                    if (title == undefined) {
                        title = "";
                        console.warn('Title for this page not found:', path)
                    }
                }
            }
            this.setPageTitle(title);
        } else {
            var t = document.getElementById('page-title');
            if (!t.textContent)
                t.textContent = document.title;
        }
    }

    /* set the page title */
    setPageTitle(title) {
        var pageTitle = document.getElementById('page-title');
        if (title) {
            document.title = title + " - Diakôluô"
            if (pageTitle) {
                pageTitle.textContent = title;
            }
        } else {
            document.title = "Diakôluô";
            if (pageTitle) {
                pageTitle.textContent = "Diakôluô";
            }
        }
    }
}

const I18N = new I18NClass();
I18N.initAsyncFunc = I18N.initialise();

/* ############################ res/js/base/modals.js #############################*/

/* A class tha hold a modal */
class Modal {
    /* GLOBALS FIELDS */
    static currentModal;
    static modalQueue = [];

    /* load a modal from a file and a list of buttons to bind callbacks */
    static loadModal(id, buttons) {
        var modal = document.createElement('div');
        modal.classList = 'modal hide';
        modal.id = id + '-modal';
        document.body.appendChild(modal);

        document.body.classList.add("hide-scroll");
        return new Promise((resolve, reject) => {
            let request = new XMLHttpRequest();
            request.open('GET', '/WebDiakoluo/res/modals/' + id + '.html');
            request.responseType = 'html';
            request.onload = function() {
                if (request.status == 200) {
                    modal.innerHTML = request.response;
                    if (buttons) {
                        var b;
                        for (var i = 0; i < buttons.length; i++) {
                            b = buttons[i];
                            document.getElementById(b.id).onclick = b.onclick;
                        }
                    }
                    var modalObject = new Modal(modal);
                    if (modal.children[0].classList.contains('no-disimiss')) {
                        modalObject.noDisimiss = true;
                    }
                    Modal.showModal(modalObject);
                    resolve(modalObject);
                } else {
                    document.body.removeChild(modal);
                    document.body.classList.remove("hide-scroll");
                    reject();
                }
            }
            request.send();
        });
    }

    /* hide a modal */
    static hideModal() {
        Modal.currentModal.modal.classList.add('hide');
        document.body.classList.remove("hide-scroll");
        var modal = Modal.currentModal;
        Modal.currentModal = null;
        modal.onhide?.();

        modal = Modal.modalQueue.shift();
        if (modal) Modal.showModal(modal);
    }

    /* show a modal */
    static showModal(modal) {
        if (Modal.currentModal) {
            Modal.modalQueue.push(modal);
        } else {
            Modal.currentModal = modal;
            Modal.currentModal.onshow?.();
            Modal.currentModal.modal.classList.remove('hide');
            document.body.classList.add("hide-scroll");
        }
    }

    /* BASE DIALOGS BUILDERS */

    static createModalClose() {
        var e = document.createElement('button', {is: 'modal-close'});
        e.classList = 'modal-close';
        e.textContent = "×";
        return e;
    }

    static createBaseModal(title, description, options) {
        var modal = document.createElement('div');
        modal.classList = 'modal hide';

        var modalContent = document.createElement('div');
        modalContent.classList = 'modal-content';
        if (options?.important) modalContent.classList.add('red');

        var container = document.createElement('header');
        container.textContent = I18N.getTranslation(title);
        if (!options?.noDisimiss) container.appendChild(this.createModalClose());
        modalContent.appendChild(container);

        container = document.createElement('main');
        var e = document.createElement('p');
        e.innerHTML = I18N.getTranslation(description);
        container.appendChild(e);
        modalContent.appendChild(container);

        modal.appendChild(modalContent);
        return modal;
    }

    /* show a base modal to confirm an information */
    static showOkModal(title, description, options) {
        return new Promise(resolve => {
            if (options?.showAgain && localStorage.getItem(options?.showAgain) === "true") {
                resolve();
                return;
            }

            var modal = Modal.createBaseModal(title, description, options);
            var container = modal.querySelector("main");

             if (options?.showAgain) {
                var showAgainCheckBox = document.createElement('input');
                showAgainCheckBox.type = 'checkbox';
                container.appendChild(showAgainCheckBox);

                var e = document.createElement('label');
                e.textContent = I18N.getTranslation('dont-show-again');
                container.appendChild(e);
                e.htmlFor = showAgainCheckBox.id = randomId();
             }

            var e = VIEW_UTILS.createImageButton('ok', true, null, {is: "modal-close"});
            container.appendChild(e);
            if (options?.important) e.classList.add('red')

            document.body.appendChild(modal);

            var modalObject = new Modal(modal);
            modalObject.noDisimiss = options?.noDisimiss;
            modalObject.onhide = () => {
                modalObject.delete();
                if (showAgainCheckBox && cookiesConsent) 
                    localStorage.setItem(options?.showAgain, showAgainCheckBox.checked);
                resolve();
            };
            modalObject.show();
        });
    }

    /* show a base modal to confirm an information */
    static showActionModal(title, description, button, options) {
        return new Promise((resolve, reject) => {
            var notResolved = true;
            var modal = Modal.createBaseModal(title, description, options);

            var container = modal.querySelector('main');

            var e = VIEW_UTILS.createImageButton(button?.name || 'ok', true, button?.icon);
            e.onclick = () => {
                notResolved = false;
                Modal.hideModal();
                resolve(true);
            }
            container.appendChild(e);

            if (options?.important) e.classList.add('red')


            e = VIEW_UTILS.createImageButton(options?.cancelButton?.name || 'cancel', false, options?.cancelButton?.icon, {is: 'modal-close'});
            container.appendChild(e);

            document.body.appendChild(modal);

            var modalObject = new Modal(modal);
            modalObject.noDisimiss = options?.noDisimiss;
            modalObject.onhide = () => {
                modalObject.delete();
                if (notResolved) resolve(false);
            };
            modalObject.show();
        });
    }

    /* MODALS CLASSES */

    constructor(modal) {
        this.modal = modal;
    }

    /* show the modal */
    show() {
        Modal.showModal(this);
    }

    /* hide the modal */
    hide() {
        Modal.hideModal(this);
    }

    /* delete the modal from the document */
    delete() {
        if (this ===  Modal.currentModal) Modal.hideModal();
        document.body.removeChild(this.modal);
    }
}

class ModalClose extends HTMLButtonElement {
  constructor() {
    super();
    this.addEventListener("click", Modal.hideModal);
  }
}

customElements.define('modal-close', ModalClose, { extends: 'button' });

/* ############################# res/js/base/base.js ##############################*/

const LEGAL_PATH = "/WebDiakoluo/legal.html";
var cookiesConsent = false;

/* remove all children of a DOM element*/
function removeAllChildren(view) {
    while (view.children.length) {
        view.removeChild(view.children[0]);
    }
}

/* clamp a value between a maximum and a minimum */
function clamp(value, mini, maxi) {
    if (value >= maxi) {
        return maxi;
    } else if (value <= mini) {
        return mini;
    } else {
        return value;
    }
}

/* get a random number in [0, maxi[ */
function randint(maxi) {
    return Math.floor(Math.random() * maxi);
}

/* get a list of n numbers between 0 and maxi all unique. Maxi isn't include */
function randomUniqueNumberList(n, maxi) {
    if (n <= maxi) {
        var arr = [];
        var r;
        while (arr.length < n) {
            r = Math.floor(Math.random() * maxi);
            if (arr.indexOf(r) === -1)
                arr.push(r);
        }
        return arr;
    } else {
        throw new Error("Infinite loop warning !");
    }
}

/* get a array of n int in a random order */
function randomShuffledNumberList(n) {
    var arr = [];
    for (var i = 0; i < n; i++) {
        arr.push(i);
    }

    var temp;
    var from;
    var to;
    for (var i = 0, max = n - 1; i < max; i++) {
        from = Math.floor(Math.random() * n);
        to = Math.floor(Math.random() * n);
        temp = arr[from];
        arr[from] = arr[to];
        arr[to] = temp;
    }

    return arr;
}

/* get a random id */
function randomId() {
    return Math.random().toString(36).substr(2, 9);
}

/* get if str starts with start (ignoring spaces) */
function startsWithIgnoreSpace(str, start) {
    var j = 0;
    var c;
    for (var i = 0; i < str.length; i++) {
        c = str[i];
        if (c === start[j]) {
            if (++j >= start.length)
                return true;
        } else if (c !== ' ' && c !== '\n' && c !== '\t' && c !== '\r') {
            return false;
        }
    }
    return false;
}

/* get if str ends with end (ignoring spaces) */
function endsWithIgnoreSpace(str, end) {
    var j = end.length - 1;
    var c;
    for (var i = str.length - 1; i >= 0 ; i--) {
        c = str[i];
        if (c === end[j]) {
            if (--j < 0)
                return true;
        } else if (c !== ' ' && c !== '\n' && c !== '\t' && c !== '\r') {
            return false;
        }
    }
    return false;
}

/* add the manifest */
function addManifest(lang) {
    var l = document.createElement('link');
    l.rel = "manifest";
    l.href = "/WebDiakoluo/manifests/" + lang + '.webmanifest';
    document.head.appendChild(l);
}

/* if the keypress is return redirect to on click */
function onReturnClick(event) {
    if (event.keyCode === KeyboardEvent.DOM_VK_RETURN) {
        event.target.click();
    }
}

if('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/WebDiakoluo/sw.js', {scope: '/WebDiakoluo/'});
}

// verify cookies
function verifyCookies() {
    /* accept cookies button callback*/
    function cookiesCallback() {
        Modal.currentModal.delete();
    }

    cookiesConsent = Boolean(localStorage.getItem("lang"));

    if (!cookiesConsent && document.location.pathname != LEGAL_PATH) {
        Modal.showActionModal(
            'cookies', 
            'cookies-message', 
            {name: 'cookies-accept'}, 
            {cancelButton: {name: 'more-informations', icon: '/WebDiakoluo/res/img/info.svg'}, noDisimiss: true})
        .then(response => {
            if (response) {
                localStorage.setItem("lang", I18NClass.detectLang());
                cookiesConsent = true;
            } else {
                document.location.href = LEGAL_PATH;
            }
        });
        
    }
}

I18N.initAsyncFunc.then(verifyCookies);

/* ############################ res/js/base/include.js ############################*/

/*
Custom element that load a sub-page.
*/
class IncludeElement extends HTMLElement {
    static get observedAttributes() { return ['key']; }

    constructor() {
        super();
    }

    update() {
        let obj = this;
        let key = this.getAttribute('key');
        let request = new XMLHttpRequest();
        request.open('GET', '/WebDiakoluo/res/include/' + key + '.html');
        request.responseType = 'html';
        request.send();

        request.onload = function() {
            obj.innerHTML = request.response;
        }
        request.onerror = function() {
            obj.innerHTML = key;
        }
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'key' && newValue != null) {
            this.update();
        }
    }
}
customElements.define('x-include', IncludeElement);

/* ########################## res/js/base/view-utils.js ###########################*/

class VIEW_UTILS {
    /* Get a boolean view, it is the view element of the check box */
    static booleanView(bool, name) {
        var span = document.createElement('span');
        span.classList = bool ? ['boolean-true'] : ['boolean-false'];
        span.textContent = name;
        return span;
    }

    static booleanEdit(bool, name, id) {
        if (!id) id = randomId();
        var div = document.createElement('div');
        var e = document.createElement('input');
        e.type = 'checkbox';
        e.checked = bool;
        e.id = id;
        div.appendChild(e);

        e = document.createElement('label');
        e.htmlFor = id;
        e.textContent = name;
        div.appendChild(e);
        return div;
    }

    /* create dynamically an image button (right) */
    static createImageButton(buttonName, buttonColored, buttonIcon, documentCreateOptions) {
        var but = document.createElement('button', documentCreateOptions);
        but.classList = 'btn image-button right';
        if (buttonColored) but.classList.add('colored');
        
        if (buttonIcon) {
           var e = document.createElement('img');
           e.src = buttonIcon;
           but.appendChild(e);

           e = document.createElement('span');
           e.textContent = I18N.getTranslation(buttonName).toUpperCase();
           but.appendChild(e);
        } else {
            but.textContent = I18N.getTranslation(buttonName).toUpperCase(); 
        }
        return but;
    }
}

/* ############################## res/js/base/nav.js ##############################*/

var navOfflineLogo = document.getElementById('nav-offline');

if (navOfflineLogo) {
    if (navigator.onLine) {
        ononlineCallback();
    } else {
        onofflineCallback();
    }
}

async function onNavBarLoadded() {
    await I18N.initAsyncFunc;
    navOfflineLogo = document.getElementById('nav-offline');
    I18N.updatePageTitle();
    if (navigator.onLine) {
        ononlineCallback();
    } else {
        onofflineCallback();
    }
}

function onofflineCallback() {
    navOfflineLogo.classList.remove('hide');
}

function ononlineCallback() {
    navOfflineLogo.classList.add('hide');
}

window.onoffline = onofflineCallback;
window.ononline = ononlineCallback;

/* ######################## res/js/base/navigation-bar.js #########################*/

/* A navigation bar */
class NavigationBar {

    /* create a nav button. Parameters: right if it is right aligned and max if it is last or first button*/
    static createNavButton(right, max) {
        var e = document.createElement('button');
        e.classList.add('nav-button');
        e.classList.add('nav-' + (right ? 'right' : 'left') + (max ? '-max' : ''));

        return e;
    }

    /* create a navigation bar in the parent and with optionnal buttons (array of object {className, id}) */
    constructor(parent, buttons) {
        this.status = 0; // status represent disabled buttons 0: none, 1: left, 2: right

        var parentDiv = document.createElement('div');
        parentDiv.classList.add('nav-bar');

        this.first = NavigationBar.createNavButton(false, true);
        this.first.onclick = e => this.onfirst?.(e);

        this.previous = NavigationBar.createNavButton(false, false);
        this.previous.onclick = e => this.onprevious?.(e);

        this.next = NavigationBar.createNavButton(true, false);
        this.next.onclick = e => this.onnext?.(e);

        this.last = NavigationBar.createNavButton(true, true);
        this.last.onclick = e => this.onlast?.(e);

        var div = document.createElement('div');
        div.classList = 'nav-div';

        div.appendChild(this.first);
        div.appendChild(this.previous);
        parentDiv.appendChild(div);

        if (buttons) {
            div = document.createElement('div');

            var b;
            var e;
            for (var i = 0; i < buttons.length; i++) {
                b = buttons[i];
                e = document.createElement('button');
                e.classList.add('nav-button');
                e.classList.add(b.className);
                e.onclick = b.onclick;

                div.appendChild(e)
            }

            parentDiv.appendChild(div);
        }

        div = document.createElement('div');
        div.classList = 'nav-div';

        div.appendChild(this.next);
        div.appendChild(this.last);
        parentDiv.appendChild(div);

        parent.appendChild(parentDiv);
    }

    updateStatus(status) {
        if (status !== this.status) {
            if (this.status === 1) {
                this.first.classList.remove('disabled');
                this.previous.classList.remove('disabled');
            } else if (this.status === 2) {
                this.last.classList.remove('disabled');
                this.next.classList.remove('disabled');
            }

            this.status = status;

            if (this.status === 1) {
                this.first.classList.add('disabled');
                this.previous.classList.add('disabled');
            } else if (this.status === 2) {
                this.last.classList.add('disabled');
                this.next.classList.add('disabled');
            }
        }
    }
}

/* A next and a previous buttons on the right and the left of the screen */
class GlobalNavigation {

    /* create a nav button. Parameters: right if it is right aligned and max if it is last or first button*/
    static createNavButton(right) {
        var e = document.createElement('button');
        e.classList.add('global-nav-button');
        e.classList.add('global-nav-' + (right ? 'right' : 'left'));

        return e;
    }

    /* create a navigation global in the parent */
    constructor(parent) {
        this.status = 0; // status represent disabled buttons 0: none, 1: left, 2: right

        this.previous = GlobalNavigation.createNavButton(false);
        this.previous.onclick = e => {this.previous.blur();this.onprevious?.(e)};

        this.next = GlobalNavigation.createNavButton(true);
        this.next.onclick = e => {this.next.blur();this.onnext?.(e)};

        parent.appendChild(this.previous);
        parent.appendChild(this.next);
    }

    updateStatus(status) {
        if (status !== this.status) {
            if (this.status === 1) {
                this.previous.classList.remove('disabled');
            } else if (this.status === 2) {
                this.next.classList.remove('disabled');
            }

            this.status = status;

            if (this.status === 1) {
                this.previous.classList.add('disabled');
            } else if (this.status === 2) {
                this.next.classList.add('disabled');
            }
        }
    }
}

/* ######################### res/js/base/progress-bar.js ##########################*/

class ProgressBar extends HTMLElement {
    constructor() {
        super();
        this.innerDiv = document.createElement('div');
        this.innerDiv.classList = "progress-bar-inner";
        this.appendChild(this.innerDiv);

        this.textDiv = document.createElement('div');
        this.textDiv.classList = "progress-bar-text";
        this.appendChild(this.textDiv);

        this.setProgress(0); // initialise progress
    }

    /* set the progress to show */
    setProgress(value, disableAnimation=false) {
        if (disableAnimation) {
            this.innerDiv.style.transition = 'none';
            this.innerDiv.style.width = value * 100 + '%';
            setTimeout(() => this.innerDiv.style.transition = '', 100); // if no timeout, it could be ignored.
        } else {
            this.innerDiv.style.width = value * 100 + '%';
        }
    }

    /* set the text to show inside */
    setText(text) {
        this.textDiv.textContent = text;
    }
}

customElements.define('progress-bar', ProgressBar);


/* ######################### res/js/base/context-menu.js ##########################*/

class ContextMenu {
    constructor(contextMenuId) {
        this.shown = false;
        this.revertX = false;
        this.contextMenu = document.getElementById(contextMenuId);
    }

    /* show the context menu at the pos x and y */
    show(x, y) {
        this.shown = true;
        this.contextMenu.classList.add('context-show');

        if (x + this.contextMenu.offsetWidth > window.innerWidth) {
            x -= this.contextMenu.offsetWidth;
            this.revertX = true;
            this.contextMenu.classList.add('revertX');
        } else if (this.revertX) {
            this.contextMenu.classList.remove('revertX');
            this.revertX = false;
        }

        this.contextMenu.style.left = x + 'px';
        this.contextMenu.style.top = y + 'px';
        this.elementFocus = document.activeElement;
        this.contextMenu.children[0].focus();
    }

    /* disimiss the context menu and return if it has done something */
    disimiss() {
        if (this.shown) {
            this.shown = false;
            this.contextMenu.classList.remove('context-show');
            this.elementFocus.focus();
            this.elementFocus = null;
            return true;
        }
        return false;
    }
}