

/* ############################# res/js/base/base.js ##############################*/

/* remove all children of a DOM element*/
function removeAllChildren(view) {
    while (view.children.length) {
        view.removeChild(view.children[0]);
    }
}

/* clamp a value between a maximum and a minimum */
function clamp(value, mini, maxi) {
    if (value >= maxi) {
        return maxi;
    } else if (value <= mini) {
        return mini;
    } else {
        return value;
    }
}

/* get a random number in [0, maxi[ */
function randint(maxi) {
    return Math.floor(Math.random() * maxi);
}

/* get a list of n numbers between 0 and maxi all unique. Maxi isn't include */
function randomUniqueNumberList(n, maxi) {
    if (n <= maxi) {
        var arr = [];
        var r;
        while (arr.length < n) {
            r = Math.floor(Math.random() * maxi);
            if (arr.indexOf(r) === -1)
                arr.push(r);
        }
        return arr;
    } else {
        throw new Error("Infinite loop warning !");
    }
}

/* get a array of n int in a random order */
function randomShuffledNumberList(n) {
    var arr = [];
    for (var i = 0; i < n; i++) {
        arr.push(i);
    }

    var temp;
    var from;
    var to;
    for (var i = 0, max = n - 1; i < max; i++) {
        from = Math.floor(Math.random() * n);
        to = Math.floor(Math.random() * n);
        temp = arr[from];
        arr[from] = arr[to];
        arr[to] = temp;
    }

    return arr;
}

/* get a random id */
function randomId() {
    return Math.random().toString(36).substr(2, 9);
}

/* get if str starts with start (ignoring spaces) */
function startsWithIgnoreSpace(str, start) {
    var j = 0;
    var c;
    for (var i = 0; i < str.length; i++) {
        c = str[i];
        if (c === start[j]) {
            if (++j >= start.length)
                return true;
        } else if (c !== ' ' && c !== '\n' && c !== '\t' && c !== '\r') {
            return false;
        }
    }
    return false;
}

/* get if str ends with end (ignoring spaces) */
function endsWithIgnoreSpace(str, end) {
    var j = end.length - 1;
    var c;
    for (var i = str.length - 1; i >= 0 ; i--) {
        c = str[i];
        if (c === end[j]) {
            if (--j < 0)
                return true;
        } else if (c !== ' ' && c !== '\n' && c !== '\t' && c !== '\r') {
            return false;
        }
    }
    return false;
}

if('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/WebDiakoluo/sw.js', {scope: '/WebDiakoluo/'});
}

/* ############################# res/js/base/i18n.js ##############################*/

const LANGUAGES = ['en', 'fr'];
const LANGUAGES_BUTTONS = {'en': "&#127468;&#127463; English", 'fr': "&#127467;&#127479; Français"};
const PATH_OFFSET = 13;
const DEFAULT_LANGUAGE = 'en';
const LEGAL_PATH = "/WebDiakoluo/legal.html";
const DATE_FORMATER = new Intl.DateTimeFormat(navigator.language, {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
});
const languageSelector = document.getElementById("language-selector");
const exceptTitlePath = ['/WebDiakoluo/', '/WebDiakoluo/index.html'];

var onTranslationReady = null; // set var to null after use

var translations = null;
var universal = null;

/*
Custom element that hold a translation.
*/
class I18nElement extends HTMLElement {
    static get observedAttributes() { return ['key', 'caps']; }

    constructor() {
        super();
        this.textContent = this.getAttribute('key');
    }

    /* Update the translation */
    updateI18n() {
        if (universal == null || translations == null) return;
        var tr = getTranslation(this.getAttribute('key'))
        var caps = this.getAttribute('caps')
        if (caps == 'upper') this.innerHTML = tr.toUpperCase();
        else if (caps == 'lower') this.innerHTML = tr.toLowerCase();
        else this.innerHTML = tr;
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'key' && newValue != null || name == 'caps') {
            this.updateI18n();
        }
    }
}

/* Initialise the module */
function initialise() {
    customElements.define('x-i18n', I18nElement);

    let parent = document.getElementById('language-selector-childs');
    for (var i = 0; i < LANGUAGES.length; i++) {
        let lang = LANGUAGES[i];
        let button = document.createElement('div');
        button.classList = ['selector-dropdown-child'];
        button.innerHTML = LANGUAGES_BUTTONS[lang];
        button.setAttribute('lang', lang)
        button.onclick = function() {
            setLang(lang, false);
            languageSelector.textContent = button.textContent;
            if (document.location.pathname != LEGAL_PATH) localStorage.setItem("lang", lang);
        }
        parent.appendChild(button);
    }

    let lang = localStorage.getItem("lang");
    if (lang == null) {
        lang = detectLang();
        if (document.location.pathname != LEGAL_PATH) loadModal('cookies');
    }
    setLang(lang, true);

    let request = new XMLHttpRequest();
    request.open('GET', '/WebDiakoluo/res/translations/universal.json');
    request.responseType = 'json';
    request.send();

    request.onload = function() {
        universal = request.response;
        onSetLang();
    }
}

/* Set a new lang */
function setLang(lang, updateButton) {
    let request = new XMLHttpRequest();
    request.open('GET', '/WebDiakoluo/res/translations/' + lang + '.json');
    request.responseType = 'json';
    request.send();

    request.onload = function() {
        if (request.response == null) {
            langError(lang);
        } else {
            translations = request.response
            onSetLang();
        }
    }

    request.onerror = function(e) {langError(lang);};

    if (updateButton) {
        languageSelector.textContent = document.querySelector("[lang=" + lang + "]").textContent;
    }
}

/* When the request is receive */
function onSetLang() {
    if (universal != null && translations != null) {
        if (onTranslationReady) {
            onTranslationReady();
            onTranslationReady = null;
        }
        updateAll();
    }
}

/* When an error occur while importing translations */
function langError(lang) {
    console.error("Can't load the language:", lang)
    if (translations == null) {
        let l = detectLang();
        if (l == lang) {
            if (lang == DEFAULT_LANGUAGE) {
                console.error("FATAL ERROR: can't load default language !")
            } else {
                setLang(DEFAULT_LANGUAGE);
            }
        } else {
            setLang(l);                
        }
    }
}

/* get a translations in the current language */
function getTranslation(key) {
    let tr = translations[key];
    if (tr != undefined) {
        return tr;
    } else {
        tr = universal[key];
        if (tr == undefined) {
            console.warn("A key isn't available in this language !", key);
            return key;
        } else {
            return tr;
        }
    }
}

/* Update all translations in the page */
function updateAll() {
    let i18n = document.getElementsByTagName('x-i18n');
    for (var i = 0; i < i18n.length; i++) {
        i18n[i].updateI18n();
    }
    
    updatePageTitleCallback();
}

/* Return the lang detected from the navigator */
function detectLang() {
    for (var i = 0; i < navigator.languages.length; i++) {
        for (var j = 0; j < LANGUAGES.length; j++) {
            if (navigator.languages[i].toLowerCase() == LANGUAGES[j] || navigator.languages[i].substring(0, 2).toLowerCase() == LANGUAGES[j]) {
                return LANGUAGES[j];
            }
        }
    }
    return DEFAULT_LANGUAGE; // by default return en
}

/* accept cookies button callback*/
function cookiesCallback() {
    deleteModal('cookies');
    localStorage.setItem("lang", detectLang());
}

function updatePageTitleCallback() {
    if (exceptTitlePath.indexOf(document.location.pathname) < 0) {
        updatePageTitle();
    } else {
        var t = document.getElementById('page-title');
        if (!t.textContent)
            t.textContent = document.title;
    }
}

/* update page title */
function updatePageTitle(id = null) {
    if (translations == null) {
        setTimeout(function () {updatePageTitle(id)}, 100);
        return;
    }
    var title;
    if (id) {
        title = translations[id];
    } else {
        let path = document.location.pathname.substring(PATH_OFFSET);
        title = translations['title-' + path];
        if (title == undefined) {
            title = translations['title-' + path + 'index.html']
            if (title == undefined) {
                title = "";
                console.warn('Title for this page not found:', path)
            }
        }
    }
    setPageTitle(title);
}

/* set the page title */
function setPageTitle(title) {
    var pageTitle = document.getElementById('page-title');
    if (title) {
        document.title = title + " - Diakôluô"
        if (pageTitle) {
            pageTitle.textContent = title;
        }
    } else {
        document.title = "Diakôluô";
        if (pageTitle) {
            pageTitle.textContent = "Diakôluô";
        }
    }
}

function isTranslationsReady() {
    return !(universal == null || translations == null);
}

initialise();

/* ############################ res/js/base/include.js ############################*/

/*
Custom element that load a sub-page.
*/
class IncludeElement extends HTMLElement {
    static get observedAttributes() { return ['key']; }

    constructor() {
        super();
    }

    update() {
        let obj = this;
        let key = this.getAttribute('key');
        let request = new XMLHttpRequest();
        request.open('GET', '/WebDiakoluo/res/include/' + key + '.html');
        request.responseType = 'html';
        request.send();

        request.onload = function() {
            obj.innerHTML = request.response;
        }
        request.onerror = function() {
            obj.innerHTML = key;
        }
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'key' && newValue != null) {
            this.update();
        }
    }
}
customElements.define('x-include', IncludeElement);

/* ############################ res/js/base/modals.js #############################*/

/* load a modal from a file */
function loadModal(id) {
    let request = new XMLHttpRequest();
    request.open('GET', '/WebDiakoluo/res/modals/' + id + '.html');
    request.responseType = 'html';
    request.send();

    var modal = document.createElement('div');
    modal.classList = ['modal'];
    modal.id = id + '-modal';
    document.body.appendChild(modal);

    document.body.classList.add("hide-scroll");

    request.onload = function() {
        if (request.status == 200) {
            modal.innerHTML = request.response;
        } else {
            deleteModal(id);
        }
    }
}

/* hide a modal */
function hideModal(id) {
    document.getElementById(id + "-modal").classList.add('hide');
    document.body.classList.remove("hide-scroll");
}

/* show a modal */
function showModal(id) {
    document.getElementById(id + "-modal").classList.remove('hide');
    document.body.classList.add("hide-scroll");
}

/* delete a modal from the document */
function deleteModal(id) {
    hideModal(id);
    document.body.removeChild(document.getElementById(id + '-modal'))
}

/* callback for modal-show checkbox */
function modalShowCheck(id) {
    localStorage.setItem(id, document.getElementById('modal-show').checked);
}

class ButtonModal extends HTMLButtonElement {
  constructor() {
    super();
    this.modalName = this.getAttribute('modal-name');
    this.modalAction = this.getAttribute('modal-action');
    this.addEventListener("click", this.onclick);
  }
  onclick() {
    if (this.modalAction == 'show') {
        showModal(this.modalName);
    } else if (this.modalAction == 'hide') {
        hideModal(this.modalName);
    }
  }
}

customElements.define('button-modal', ButtonModal, { extends: 'button' });

/* ########################## res/js/base/view-utils.js ###########################*/

class VIEW_UTILS {
    /* Get a boolean view, it is the view element of the check box */
    static booleanView(bool, name) {
        var span = document.createElement('span');
        span.classList = bool ? ['boolean-true'] : ['boolean-false'];
        span.textContent = name;
        return span;
    }

    static booleanEdit(bool, name, id) {
        if (!id) id = randomId();
        var div = document.createElement('div');
        var e = document.createElement('input');
        e.type = 'checkbox';
        e.checked = bool;
        e.id = id;
        div.appendChild(e);

        e = document.createElement('label');
        e.htmlFor = id;
        e.textContent = name;
        div.appendChild(e);
        return div;
    }
}

/* ############################## res/js/base/nav.js ##############################*/

var navOfflineLogo = document.getElementById('nav-offline');

if (navOfflineLogo) {
    if (navigator.onLine) {
        ononlineCallback();
    } else {
        onofflineCallback();
    }
}

function onNavBarLoadded() {
    navOfflineLogo = document.getElementById('nav-offline');
    updatePageTitleCallback();
    if (navigator.onLine) {
        ononlineCallback();
    } else {
        onofflineCallback();
    }
}

function onofflineCallback() {
    navOfflineLogo.classList.remove('hide');
}

function ononlineCallback() {
    navOfflineLogo.classList.add('hide');
}

window.onoffline = onofflineCallback;
window.ononline = ononlineCallback;

/* ######################## res/js/base/navigation-bar.js #########################*/

/* A navigation bar */
class NavigationBar {

    /* create a nav button. Parameters: right if it is right aligned and max if it is last or first button*/
    static createNavButton(right, max) {
        var e = document.createElement('button');
        e.classList.add('nav-button');
        e.classList.add('nav-' + (right ? 'right' : 'left') + (max ? '-max' : ''));

        return e;
    }

    /* create a navigation bar in the parent and with optionnal buttons (array of object {className, id}) */
    constructor(parent, buttons) {
        this.status = 0; // status represent disabled buttons 0: none, 1: left, 2: right

        var parentDiv = document.createElement('div');
        parentDiv.classList.add('nav-bar');

        this.first = NavigationBar.createNavButton(false, true);
        this.first.onclick = e => this.onfirst?.(e);

        this.previous = NavigationBar.createNavButton(false, false);
        this.previous.onclick = e => this.onprevious?.(e);

        this.next = NavigationBar.createNavButton(true, false);
        this.next.onclick = e => this.onnext?.(e);

        this.last = NavigationBar.createNavButton(true, true);
        this.last.onclick = e => this.onlast?.(e);

        var div = document.createElement('div');
        div.classList = 'nav-div';

        div.appendChild(this.first);
        div.appendChild(this.previous);
        parentDiv.appendChild(div);

        if (buttons) {
            div = document.createElement('div');

            var b;
            var e;
            for (var i = 0; i < buttons.length; i++) {
                b = buttons[i];
                e = document.createElement('button');
                e.classList.add('nav-button');
                e.classList.add(b.className);
                e.onclick = b.onclick;

                div.appendChild(e)
            }

            parentDiv.appendChild(div);
        }

        div = document.createElement('div');
        div.classList = 'nav-div';

        div.appendChild(this.next);
        div.appendChild(this.last);
        parentDiv.appendChild(div);

        parent.appendChild(parentDiv);
    }

    updateStatus(status) {
        if (status !== this.status) {
            if (this.status === 1) {
                this.first.classList.remove('disabled');
                this.previous.classList.remove('disabled');
            } else if (this.status === 2) {
                this.last.classList.remove('disabled');
                this.next.classList.remove('disabled');
            }

            this.status = status;

            if (this.status === 1) {
                this.first.classList.add('disabled');
                this.previous.classList.add('disabled');
            } else if (this.status === 2) {
                this.last.classList.add('disabled');
                this.next.classList.add('disabled');
            }
        }
    }
}

/* A next and a previous buttons on the right and the left of the screen */
class GlobalNavigation {

    /* create a nav button. Parameters: right if it is right aligned and max if it is last or first button*/
    static createNavButton(right) {
        var e = document.createElement('button');
        e.classList.add('global-nav-button');
        e.classList.add('global-nav-' + (right ? 'right' : 'left'));

        return e;
    }

    /* create a navigation global in the parent*/
    constructor(parent) {
        this.status = 0; // status represent disabled buttons 0: none, 1: left, 2: right

        this.previous = GlobalNavigation.createNavButton(false);
        this.previous.onclick = e => {this.previous.blur();this.onprevious?.(e)};

        this.next = GlobalNavigation.createNavButton(true);
        this.next.onclick = e => {this.next.blur();this.onnext?.(e)};

        parent.appendChild(this.next);
        parent.appendChild(this.previous);
    }

    updateStatus(status) {
        if (status !== this.status) {
            if (this.status === 1) {
                this.previous.classList.remove('disabled');
            } else if (this.status === 2) {
                this.next.classList.remove('disabled');
            }

            this.status = status;

            if (this.status === 1) {
                this.previous.classList.add('disabled');
            } else if (this.status === 2) {
                this.next.classList.add('disabled');
            }
        }
    }
}