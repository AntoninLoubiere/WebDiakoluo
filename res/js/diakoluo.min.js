

/* ######################### res/js/diakoluo/database.js ##########################*/

const EDIT_KEY = "edit";

/* the manager of the database */
class DatabaseManager {
    constructor() {
        this.testDB = null;
        this.testDBEditor = null;

        this.freeIndex = null;
        this.onloadedcallback = null;
    }

    /* initialise the db */
    initialise() {
        this.testDB = indexedDB.open('tests', 1);
        this.testDB.onerror = function(event) {
            console.error('Database cannot be loaded', event);
        };

        this.testDB.onsuccess = event => {
            this.testDBEditor = event.target.result;
            this.testDBEditor.onerror = this.onTestDBError;

            // get the last obhect key
            this.testDBEditor.transaction(['header']).objectStore('header').openCursor(null, "prev").onsuccess = event => {
                var cursor = event.target.result;
                if (cursor) {
                    if (cursor.key == EDIT_KEY) {
                        cursor.continue();
                        return;
                    }
                    this.freeIndex = cursor.key + 1;
                } else {
                    this.freeIndex = 1;
                }
                console.info("Database loaded.");
                this.onloaded();
            };
        }

        this.testDB.onupgradeneeded = event => {
            this.testDBEditor = event.target.result;

            this.testDBEditor.onerror = this.onTestDBError;

            switch (this.testDBEditor.version) {
                case 1:
                    var header = this.testDBEditor.createObjectStore("header", { keyPath: "id" });

                    header.createIndex("title", "title", { unique: false });
                    header.createIndex("description", "description", { unique: false });
                    header.createIndex("playable", "playable", { unique: false });

                    var tests = this.testDBEditor.createObjectStore("tests", { keyPath: "id" }); // same id as above.

                    tests.createIndex("title", "title", { unique: false });
                    tests.createIndex("description", "title", { unique: false });

            }
            console.info("Database initialised or upgraded from version", this.onTestDBError?.version);
        };

        // set storage persistent if possible, else, warn the user
        if (navigator.storage && navigator.storage.persist) {
            navigator.storage.persist().then(function(persistent) {
                // TODO: improve and create a new dialog
                if (!persistent) {
                    loadModal('persist-storage-c-warning');
                }
            });
        } else {
            if (localStorage.getItem('modal-persist-c-storage') != "true") {
                loadModal('persist-storage-c-warning');
            }
        }
    }

    /* callback when an error occur on the database */
    onError(event) {
        let e = event.target.error;
        console.error("In testDB, error nÂ°" + e.code + " occur !\n\n" + e.name + "\n" + e.message, {e}, event);
    }

    /* add a new test */
    addNewTest(test) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        if (!test.id) {
            test.id = this.freeIndex;
            this.freeIndex++;
        }
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.add(test.getHeader());
        return tests.add(test);
    }

    /* update a test */
    updateTest(test) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.put(test.getHeader());
        return tests.put(test);
    }

    /* delete a test */
    deleteTest(id) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.delete(id);
        return tests.delete(id);
    }

    /* get a full test data*/
    getFullTest(id) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['tests'], "readonly");
        var tests = transaction.objectStore(['tests']);
        var r = tests.get(id);
        var o = {onsuccess: null, onerror: null};
        r.onsuccess = event => {
            var test = event.target.result;
            if (test) {
                try {
                    test = Test.cast(test);  
                } catch(e) {
                    console.error("Error while casting the test !", e);
                    if (o.onerror) o.onerror(event);
                    return;
                }
                if (o.onsuccess) o.onsuccess(test);
            } else {
                if (o.onerror) o.onerror(event);
                
            }
        }

        r.onerror = () => {
            if (o.onerror) o.onerror(event);
            else indexedDB.onerror(event);
        }

        return o;
    }

    /* get the cursor to get all childs */
    forEachHeader() {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        return this.testDBEditor.transaction(['header']).objectStore('header').openCursor();
    }
    /* set the on loaded callback */
    setOnLoaded(c) {
        if (this.freeIndex == null) {
            this.onloadedcallback = c;
        } else {
            c();
        }
    }

    onloaded() {
        this.onloadedcallback?.();
    }
}

const DATABASE_MANAGER = new DatabaseManager();
DATABASE_MANAGER.initialise();

/* ########################### res/js/diakoluo/main.js ############################*/



/* ######################### res/js/diakoluo/test/test.js #########################*/

class Test {
    /* cast an object to Test. / Add functions to the object*/
    static cast(test) {
        var nb_c = test.columns.length;
        for (var i = 0; i < test.data.length; i++) {
            if (test.data[i].length != nb_c) {
                throw new Error("Data length isn't the same as columns");
            }
        }

        var c = [];
        for (var i = 0; i < test.columns.length; i++) {
            c.push(Column.cast(test.columns[i]));
        }
        test.columns = c;

        return Object.assign(new Test(), test);
    }

    /* construct an object, if first param is null, don't create any fields */
    constructor(title, description = "") {
        if (title != null) {
            this.title = title;
            this.description = description;
            this.createDate = new Date();
            this.lastModificationDate = new Date();
            this.columns = [];
            this.data = [];
        }
    }

    /* get the header of the test*/
    getHeader() {
        return {title: this.title, description: this.description, playable: this.isPlayable(), id: this.id};
    }

    /* get if the test is playable */
    isPlayable() {
        return this.columns.length > 1 && this.data.length > 1;
    }

    /* set the last modification date to now */
    registerModificationDate() {
        this.lastModificationDate = new Date();
    }

    /* add a column return the index of the column added*/
    addColumn(column) {
        for (var i = 0; i < this.data.length; i++) {
            this.data[i].push(column.getDefaultValue());
        }
        return this.columns.push(column) - 1;
    }

    /* remove a column */
    removeColumn(index) {
        for (var i = 0; i < this.data.length; i++) {
            this.data[i].splice(index, 1);
        }

        this.columns.splice(index, 1);
    }

    /* Add a data and return the index of the item added */
    addData() {
        var d = [];
        for (var i = 0; i < this.columns.length; i++) {
            d.push(this.columns[i].getDefaultValue());
        }
        return this.data.push(d) - 1;
    }

    /* remove a test */
    removeData(index) {
        this.data.splice(index, 1);
    }
}

/* #################### res/js/diakoluo/test/columns/column.js ####################*/

var columnsClass = [];

class Column {
    static SET_CAN_BE_SHOW = 1; // 1 << 0
    static SET_CAN_BE_ASK = 2; // 1 << 1
    static DEFAULT_SETTINGS = Column.SET_CAN_BE_SHOW | Column.SET_CAN_BE_ASK;

    /* cast a column */
    static cast(column) {
        var columnClass;
        for (var i = 0; i < columnsClass.length; i++) {
            if (column.type == columnsClass[i].name) {
                columnClass = columnsClass[i];
                break;
            }
        }
        if (columnClass) {
            return Object.assign(new columnClass(), column);
        } else {
            throw new Error("Unknown type of column !");
        }
    }

    static getSkippedView() {
        var e = document.createElement('span');
        e.textContent = getTranslation('skipped');
        e.classList = ['skipped-answer'];
        return e;
    }

    /* create a column if second field is null, 0 fieds will be instentiate. Type represent the class name id */
    constructor(type, name, description = "") {
        this.type = type;
        if (name != null) {
            this.name = name;
            this.description = description;
            this.settings = Column.DEFAULT_SETTINGS;
        }
    }

    /* Get a string that represent the data */
    getDataValueString(data) {
        return data.value;
    }

    /* get a dom element that show the data */
    getViewView(data) {
        var e = document.createElement('span');
        if (data.value)
            e.textContent = data.value;
        else {
            e.textContent = getTranslation('empty-string');
            e.style.fontStyle = "italic";
        }
        return e;
    }

    /* get the view that can edit the data */
    getEditView(data) {
        var i = document.createElement('input');
        i.type = 'text';
        i.value = data.value;
        return i;
    }

    /* get the view to prompt when tested, like edit but without the data */
    getTestView(data) {
        var i = document.createElement('input');
        i.type = 'text';
        return i;
    }

    /* set the score and show the answer of the view and apply score */
    updateAnswerTestView(data, view, score) {
        var value = this.getValueFromView(view);
        if (this.isRight(data, value)) {
            score?.pushScore(1, 1);

            var e = this.getViewView(value);
            e.classList.add('right-answer');
            return e;
        } else if (this.isSkipped(data, value)) {
            score?.pushScore(0, 1);

            var div = document.createElement('div');
            div.appendChild(Column.getSkippedView());
            var e = this.getViewView(data);
            e.classList.add('answer-answer');
            div.appendChild(e);

            return div;
        }  else {
            score?.pushScore(0, 1);

            var div = document.createElement('div');
            var e = this.getViewView(value);
            e.classList.add('wrong-answer');
            div.appendChild(e);

            e = this.getViewView(data);
            e.classList.add('answer-answer');
            div.appendChild(e);
            return div;
        }
    }

    /* get the value stored in the view */
    getValueFromView(view) {
        return {value: view.value};
    }

    /* set the value from the value stored in the view */
    setValueFromView(data, view) {
        data.value = view.value;
    }

    /* get if a value is right */
    isRight(data, value) {
        return data.value === value.value;
    }

    /* get if a value is skipped */
    isSkipped(data, value) {
        return value.value === "";
    }

    /* get the default value of data for the column */
    getDefaultValue() {
        console.error("Not overrided");
    }

    /* get the settings view of the column */
    getViewColumnSettings() {
        var div = document.createElement('div');
        div.classList = ['unique-column'];
        
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(Column.SET_CAN_BE_SHOW), 
                getTranslation('column-can-show')
            )
        );
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(Column.SET_CAN_BE_ASK), 
                getTranslation('column-can-ask')
            )
        );
        return div;
    }

    /* get the settings view of the column */
    getEditColumnSettings() {
        var div = document.createElement('div');
        div.classList = ['unique-column'];
        
        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(Column.SET_CAN_BE_SHOW), 
            getTranslation('column-can-show'),
            'column-show'
        ));

        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(Column.SET_CAN_BE_ASK), 
            getTranslation('column-can-ask'),
            'column-ask'
        ));
        return div;
    }

    /* set the settings from the view */
    setEditColumnSettings(view) {
        this.setSettings(Column.SET_CAN_BE_SHOW, view.querySelector('#column-show').checked);
        this.setSettings(Column.SET_CAN_BE_ASK, view.querySelector('#column-ask').checked);
    }

    /* get some parameters in settings */
    getSettings(params) {
        return (this.settings & params) === params;
    }

    /* set some parameters in settings */
    setSettings(params, value) {
        this.settings = value ? this.settings | params : this.settings & ~params;
    }
}   

/* ################ res/js/diakoluo/test/columns/column-string.js #################*/

class ColumnString extends Column {
    constructor(name, description="") {
        super(ColumnString.name, name, description);
    }

    getDefaultValue() {
        return {value: ""};
    }
}
columnsClass.push(ColumnString);