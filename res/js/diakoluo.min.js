

/* ######################### res/js/diakoluo/database.js ##########################*/

const EDIT_KEY = "edit";

/* the manager of the database */
class DatabaseManager {
    constructor() {
        this.testDB = null;
        this.testDBEditor = null;

        this.freeIndex = null;
        this.onloadedcallback = null;
    }

    /* initialise the db */
    initialise() {
        this.testDB = indexedDB.open('tests', 1);
        this.testDB.onerror = function(event) {
            console.error('Database cannot be loaded', event);
        };

        this.testDB.onsuccess = event => {
            this.testDBEditor = event.target.result;
            this.testDBEditor.onerror = this.onTestDBError;

            // get the last obhect key
            this.testDBEditor.transaction(['header']).objectStore('header').openCursor(null, "prev").onsuccess = event => {
                var cursor = event.target.result;
                if (cursor) {
                    if (cursor.key == EDIT_KEY) {
                        cursor.continue();
                        return;
                    }
                    this.freeIndex = cursor.key + 1;
                } else {
                    this.freeIndex = 1;
                }
                console.info("Database loaded.");
                this.onloaded();
            };
        }

        this.testDB.onupgradeneeded = event => {
            this.testDBEditor = event.target.result;

            this.testDBEditor.onerror = this.onTestDBError;

            switch (this.testDBEditor.version) {
                case 1:
                    var header = this.testDBEditor.createObjectStore("header", { keyPath: "id" });

                    header.createIndex("title", "title", { unique: false });
                    header.createIndex("description", "description", { unique: false });
                    header.createIndex("playable", "playable", { unique: false });

                    var tests = this.testDBEditor.createObjectStore("tests", { keyPath: "id" }); // same id as above.

                    tests.createIndex("title", "title", { unique: false });
                    tests.createIndex("description", "title", { unique: false });

            }
            console.info("Database initialised or upgraded from version", this.onTestDBError?.version);
        };

        // set storage persistent if possible, else, warn the user
        if (navigator.storage && navigator.storage.persist) {
            navigator.storage.persist().then(function(persistent) {
                // TODO: improve and create a new dialog
                if (!persistent) {
                    loadModal('persist-storage-c-warning');
                }
            });
        } else {
            if (localStorage.getItem('modal-persist-c-storage') != "true") {
                loadModal('persist-storage-c-warning');
            }
        }
    }

    /* callback when an error occur on the database */
    onError(event) {
        let e = event.target.error;
        console.error("In testDB, error nÂ°" + e.code + " occur !\n\n" + e.name + "\n" + e.message, {e}, event);
    }

    /* add a new test */
    addNewTest(test) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        test.id = this.freeIndex;
        this.freeIndex++;
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.add(test.getHeader());
        return tests.add(test);
    }

    /* update a test */
    updateTest(test) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.put(test.getHeader());
        return tests.put(test);
    }

    /* delete a test */
    deleteTest(id) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['header', 'tests'], "readwrite");
        var header = transaction.objectStore('header');
        var tests = transaction.objectStore('tests');

        header.delete(id);
        return tests.delete(id);
    }

    /* get a full test data*/
    getFullTest(id) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        var transaction = this.testDBEditor.transaction(['tests'], "readonly");
        var tests = transaction.objectStore(['tests']);
        var r = tests.get(id);
        var o = {onsuccess: null, onerror: null};
        r.onsuccess = event => {
            var test = event.target.result;
            if (test) {
                try {
                    test = Test.cast(test);  
                } catch(e) {
                    console.error("Error while casting the test !", e);
                    if (o.onerror) o.onerror(event);
                    return;
                }
                if (o.onsuccess) o.onsuccess(test);
            } else {
                if (o.onerror) o.onerror(event);
                
            }
        }

        r.onerror = () => {
            if (o.onerror) o.onerror(event);
            else indexedDB.onerror(event);
        }

        return o;
    }

    /* get the cursor to get all childs */
    forEachHeader() {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        return this.testDBEditor.transaction(['header']).objectStore('header').openCursor();
    }

    /* get the cursor to get all childs (except edit) */
    forEach(callback) {
        if (this.freeIndex == null) {
            console.error("DB not initialised !");
            return;
        }
        this.testDBEditor.transaction(['tests']).objectStore('tests').openCursor().onsuccess = event => {
            var cursor = event.target.result;
            if (cursor) {
                var id = cursor.value.id;
                if (id != EDIT_KEY) {
                    try {
                        var test = Test.cast(cursor.value);
                    } catch(e) {
                        console.error("Error while casting the test !", e);
                        cursor.continue();
                        return;
                    }
                    callback(test);
                }
                cursor.continue();
            } else {
                callback();
            }
        };
    }

    /* set the on loaded callback */
    setOnLoaded(c) {
        if (this.freeIndex == null) {
            this.onloadedcallback = c;
        } else {
            c();
        }
    }

    onloaded() {
        this.onloadedcallback?.();
    }
}

const DATABASE_MANAGER = new DatabaseManager();
DATABASE_MANAGER.initialise();

/* ########################### res/js/diakoluo/main.js ############################*/



/* ####################### res/js/diakoluo/file_manager.js ########################*/

class FILE_MANAGER {

    static CSV_SEPARATOR = ',';
    static CSV_LINE_SEPARATOR = '\n';

    /* export the test (download the file) */
    static exportTest(test) {
        const t = FILE_MANAGER.getTestBlob(test);
        const a = document.createElement('a');  

        a.href= URL.createObjectURL(t);
        a.download = test.getFilename();
        a.click();

        URL.revokeObjectURL(t);
    }

    /* export the test in the csv format*/
    static exportCsvTest(test, columnName, columnType) {
        const t = FILE_MANAGER.getTestBlobCsv(test, columnName, columnType);
        const a = document.createElement('a');  

        a.href= URL.createObjectURL(t);
        a.download = test.getFilename();
        a.click();

        URL.revokeObjectURL(t);
    }

    /* export all tests */
    static exportAllTest() {
        FILE_MANAGER.getAllTestBlobCsv()
            .then((t) => {
                const a = document.createElement('a');  

                a.href= URL.createObjectURL(t);
                a.download = getTranslation('export-all-filename');
                a.click();

                URL.revokeObjectURL(t);
            })
            .catch((e) => {console.warn("Error", e);/* TODO */})
    }

    /* import a test */
    static importTest(file, formatDkl, csvColumnName, csvColumnType) {
        return new Promise(
            (resolve, reject) => {
                var f = new FileReader();
                f.onload = function(event) {
                    
                    try {
                        var t = formatDkl ? Test.import(JSON.parse(f.result)) : 
                                            Test.importCsv(new CsvContext(file, f.result), csvColumnName, csvColumnType);
                        if (Array.isArray(t)) {
                            for (var i = 0; i < t.length; i++) {
                                DATABASE_MANAGER.addNewTest(t[i]);
                            }
                            resolve();
                        } else if (t) {
                            DATABASE_MANAGER.addNewTest(t);
                            resolve();
                        } else {
                            reject();
                        }
                    } catch (e) {
                        console.warn("Error while importing test", e);
                        reject();
                    }
                    
                }
                f.onerror = () => reject();
                f.readAsText(file);
            }
        );
    }

    /* get the type of file, return true for dkl and false for csv */
    static getTypeFile(file) {
        return new Promise((resolve, reject) => {
            if (file.name.endsWith('.dkl')) {
                resolve(true);
            } else if (file.name.endsWith('.csv')) {
                resolve(false);
            } else {
                var f = new FileReader();
                f.onload = () => {
                    resolve((startsWithIgnoreSpace(f.result, '{') ||
                             startsWithIgnoreSpace(f.result, '[')) &&
                            (endsWithIgnoreSpace(f.result, '}') ||
                             endsWithIgnoreSpace(f.result, ']')));
                }
                f.onerror = reject;
            }
        });
    }

    /* return the blob of the test */
    static getTestBlob(test) {
        return new Blob([test.toString()], {type: 'application/diakoluo'});
    }

    /* return the blob of the test in csv */
    static getTestBlobCsv(test, columnName, columnType) {
        return new Blob([test.getCsv(columnName, columnType)], {type: 'text/csv'});
    }

    /* return the blob of all test in csv */
    static getAllTestBlobCsv(test) {
        return new Promise((resolve, reject) => {
            var data = [];
            DATABASE_MANAGER.forEach((test) => {
                if (test)
                    data.push(test.toString());
                else {
                    if (data) {
                        resolve(new Blob(['[' + data.join(',') + ']'], {type: 'application/diakoluo'}));
                    } else {
                        reject();
                    }
                }
            });
        });
    }

    /* return the cell of the string (escape chars) */
    static toCsvCell(string) {
        var quote = string.indexOf(' ') >= 0 ||
                    string.indexOf(',') >= 0 ||
                    string.indexOf('\n') >= 0 ||
                    string.indexOf('\r') >= 0 ||
                    string.indexOf('\"') >= 0 ||
                    string.indexOf('\'') >= 0 ||
                    string.length <= 0;

        string = string.replaceAll('\\', '\\\\').replaceAll('"', '\\"');
        if (quote) {
            return '"' + string + '"';
        } else {
            return string;
        }
    }

    static readLine(context) {
        var list = [];
        var currentValue = "";

        var c;
        var previousC = ' ';

        var valueStarted = false;
        var quoted = false;
        var hasBeenQuoted = false;


        for (var i = context.i; i < context.content.length; i++) {
            c = context.content[i];
            if (quoted) {
                if (previousC == '"') {
                    if (c == '"') {
                        currentValue += '"';
                        previousC = ' ';
                    } else if (c == FILE_MANAGER.CSV_SEPARATOR) {
                        list.push(currentValue);
                        currentValue = "";
                        valueStarted = false;
                        previousC = ' ';
                        quoted = false;
                    } else if (c == FILE_MANAGER.CSV_LINE_SEPARATOR) {
                        break;
                    } else {
                        // not often because need "test" ,
                        hasBeenQuoted = true;
                        quoted = false;
                        previousC = ' ';
                        currentValue += c;
                    }
                } else if (c == '"') {
                    previousC = c;
                } else {
                    currentValue += c;
                }
            } else {
                if (valueStarted) {
                    if (c == FILE_MANAGER.CSV_SEPARATOR) {
                        if (hasBeenQuoted) {
                            list.push(currentValue);
                            hasBeenQuoted = false;
                        } else {
                            list.push(currentValue.replace(/(^ +)|( +$)/g, ''));
                        }
                        currentValue = "";
                        valueStarted = false;
                    } else if (c == FILE_MANAGER.CSV_LINE_SEPARATOR) {
                        break;
                    } else {
                        currentValue += c;
                    }
                } else {
                    if (c == '"') {
                        quoted = true;
                        valueStarted = true;
                    } else if (c == FILE_MANAGER.CSV_SEPARATOR) {
                        list.push("");
                    } else if (c == FILE_MANAGER.CSV_LINE_SEPARATOR && list.length > 0) {
                        break;
                    } else if (c != ' ' && c != '\t') {
                        valueStarted = true;
                        currentValue += c;
                    }
                }
            }
        }

        if (valueStarted) {
            if (hasBeenQuoted) {
                list.push(currentValue);
            } else {
                list.push(currentValue.replace(/(^ +)|( +$)/g, ''));
            }
        }

        context.i = i + 1; // remove the end line
        if (context.columns >= 0) {
            if (list.length < context.columns && list.length > 0) {
                throw new Error("Not enough columns");
            }
        } else {
            context.columns = list.length;
        }
        return list;
    }
}

class CsvContext {
    constructor(file, content) {
        this.file = file;
        this.content = content;
        this.i = 0;
        this.columns = -1;
    }
}

/* ######################### res/js/diakoluo/test/test.js #########################*/

class Test {
    /* cast an object to Test. / Add functions to the object*/
    static cast(test) {
        var nb_c = test.columns.length;
        for (var i = 0; i < test.data.length; i++) {
            if (test.data[i].length != nb_c) {
                throw new Error("Data length isn't the same as columns");
            }
        }

        var c = [];
        for (var i = 0; i < test.columns.length; i++) {
            c.push(Column.cast(test.columns[i]));
        }
        test.columns = c;

        return Object.assign(new Test(), test);
    }

    static import(test) {
        if (Array.isArray(test)) {
            var tests = [];
            for (var i = 0; i < test.length; i++) {
                tests.push(Test.import(test[i]));
            }
            return tests;
        }
        if (typeof test?.title !== "string" || 
            typeof test.description !== "string" ||
            !Array.isArray(test.columns) ||
            !Array.isArray(test.data)||
            typeof test.createDate !== "string" ||
            typeof test.lastModificationDate !== "string") {            
            
            return null;
        }

        test.createDate = new Date(test.createDate);
        test.lastModificationDate = new Date(test.lastModificationDate);

        var nb_c = test.columns.length;
        for (var i = 0; i < test.data.length; i++) {
            if (test.data[i].length != nb_c) {
                throw new Error("Data length isn't the same as columns");
            }
        }

        var columns = [];
        var c;
        for (var i = 0; i < test.columns.length; i++) {
            c = Column.import(test.columns[i]);
            if (c)
                columns.push(c);
            else return null;
        }
        test.columns = columns;

        for (var i = 0; i < test.data.length; i++) {
            for (var j = 0; j < test.columns.length; j++) {
                if (!test.columns[j].verifyData(test.data[i][j]))
                    return null;
            } 
        }
        return Object.assign(new Test(), test);   
    }

    /* import from a csv file */
    static importCsv(csv, columnName, columnType) {
        var columns = [];
        var data = [];
        if (columnName) {
            var columnsName = FILE_MANAGER.readLine(csv);
        }

        if (columnType) {
            var columnType = FILE_MANAGER.readLine(csv);
        }

        var line = FILE_MANAGER.readLine(csv);
        for (var i = 0; i < line.length; i++) {
            columns.push(new (Column.getColumnClassCsv(columnType?.[i]))
                (columnName ? columnsName[i] : (getTranslation('default-column-title') + ' ' + (i + 1))))
        }

        var row;
        do {
            row = [];
            for (var i = 0; i < columns.length; i++) {
                row.push(columns[i].getDataFromCsv(line[i]));
            }
            data.push(row);
        } while ((line = FILE_MANAGER.readLine(csv)).length > 0);

        if (columns.length > 0) {
            var t = new Test(csv.file.name.replace(/\.[^/.]*$/, ''));
            if (csv.file.lastModified) t.createDate = t.lastModificationDate = new Date(csv.file.lastModified);
            t.columns = columns;
            t.data = data;
            return t;
        } else {
            return null;
        }
    }

    /* construct an object, if first param is null, don't create any fields */
    constructor(title, description = "") {
        if (title != null) {
            this.title = title;
            this.description = description;
            this.createDate = new Date();
            this.lastModificationDate = new Date();
            this.columns = [];
            this.data = [];
        }
    }

    /* get the header of the test*/
    getHeader() {
        return {title: this.title, description: this.description, playable: this.isPlayable(), id: this.id};
    }

    /* get if the test is playable */
    isPlayable() {
        return this.data.length > 1 && this.isPlayableColumns();
    }

    isPlayableColumns() {
        if (this.columns.length > 1) {
            var set_ask = false;
            var set_show = false;
            var c;
            for (var i = 0; i < this.columns.length; i++) {
                c = this.columns[i];
                if (c.getSettings(Column.SET_CAN_BE_SHOW)) set_show = true;
                if (c.getSettings(Column.SET_CAN_BE_ASK)) set_ask = true;
                if (set_ask && set_show) return true;
            }
        }
        return false;
    }

    /* set the last modification date to now */
    registerModificationDate() {
        this.lastModificationDate = new Date();
    }

    /* add a column return the index of the column added*/
    addColumn(column) {
        for (var i = 0; i < this.data.length; i++) {
            this.data[i].push(column.getDefaultValue());
        }
        return this.columns.push(column) - 1;
    }

    /* remove a column */
    removeColumn(index) {
        for (var i = 0; i < this.data.length; i++) {
            this.data[i].splice(index, 1);
        }

        this.columns.splice(index, 1);
    }

    /* Add a data and return the index of the item added */
    addData() {
        var d = [];
        for (var i = 0; i < this.columns.length; i++) {
            d.push(this.columns[i].getDefaultValue());
        }
        return this.data.push(d) - 1;
    }

    /* remove a test */
    removeData(index) {
        this.data.splice(index, 1);
    }

    /* get string */
    toString() {
        var id = this.id;
        delete this.id;
        var str = JSON.stringify(this);
        this.id = id;
        return str;
    }

    /* get the test as csv file */
    getCsv(columnName, columnType) {
        var csv = "";
        if (columnName) {
            for (var i = 0; i < this.columns.length; i++) {
                if (i > 0) csv += FILE_MANAGER.CSV_SEPARATOR;
                csv += FILE_MANAGER.toCsvCell(this.columns[i].name);
            }
            csv += FILE_MANAGER.CSV_LINE_SEPARATOR;
        }

        if (columnType) {
            for (var i = 0; i < this.columns.length; i++) {
                if (i > 0) csv += FILE_MANAGER.CSV_SEPARATOR;
                csv += FILE_MANAGER.toCsvCell(this.columns[i].constructor.TYPE);
            }
            csv += FILE_MANAGER.CSV_LINE_SEPARATOR;
        }

        for (var i = 0; i < this.data.length; i++) {
            for (var j = 0; j < this.columns.length; j++) {
                if (j > 0) csv += FILE_MANAGER.CSV_SEPARATOR;
                csv += FILE_MANAGER.toCsvCell(this.columns[j].getCsvValue(this.data[i][j]));
            }
            csv += FILE_MANAGER.CSV_LINE_SEPARATOR;
        }
        return csv;
    }

    getFilename() {
        return this.title
            .replaceAll(' ', '_')
            .replaceAll('.', '_')
            .replaceAll('/', '_')
            .replaceAll('\\', '_') + '.dkl';
    }
}

/* #################### res/js/diakoluo/test/columns/column.js ####################*/

var columnsClass = [];

class Column {
    // first 1 byte is reserved
    static SET_CAN_BE_SHOW = 1; // 1 << 0
    static SET_CAN_BE_ASK = 2; // 1 << 1
    static DEFAULT_SETTINGS = Column.SET_CAN_BE_SHOW | Column.SET_CAN_BE_ASK;

    /* cast a column */
    static cast(column) {
        var columnClass;
        for (var i = 0; i < columnsClass.length; i++) {
            if (column.type == columnsClass[i].TYPE || columnsClass[i].name) { // backward compatibilty
                columnClass = columnsClass[i];
                break;
            }
        }
        if (columnClass) {
            return Object.assign(new columnClass(), column);
        } else {
            throw new Error("Unknown type of column !");
        }
    }

    /* import a column */
    static import(column) {
        if (typeof column.type !== "string") {
            return null;
        }
        return Column.cast(column);
    }

    /* get the skipped view */
    static getSkippedView() {
        var e = document.createElement('span');
        e.textContent = getTranslation('skipped');
        e.classList = ['skipped-answer'];
        return e;
    }

    /* get the class constructor from the type */
    static getColumnClassCsv(type) {
        var columnClass;
        if (type) type = type.toLowerCase();
        else return ColumnString;
        for (var i = 0; i < columnsClass.length; i++) {
            if (type == columnsClass[i].TYPE.toLowerCase()) {
                return columnsClass[i];
            }
        }

        return ColumnString;
    }

    /* create a column if second field is null, 0 fieds will be instentiate. Type represent the class name id */
    constructor(type, name, description = "") {
        this.type = type;
        if (name != null) {
            this.name = name;
            this.description = description;
            this.settings = Column.DEFAULT_SETTINGS;
        }
    }

    /* Get a string that represent the data */
    getDataValueString(data) {
        return data.value;
    }

    /* Get the csv value (not escaped) */
    getCsvValue(data) {
        return data.value;
    }

    /* get a dom element that show the data */
    getViewView(data) {
        var e = document.createElement('span');
        if (data.value)
            e.textContent = data.value;
        else {
            e.textContent = getTranslation('empty-string');
            e.style.fontStyle = "italic";
        }
        return e;
    }

    /* get the view that can edit the data */
    getEditView(data) {
        var i = document.createElement('input');
        i.type = 'text';
        i.value = data.value;
        return i;
    }

    /* get the view to prompt when tested, like edit but without the data */
    getTestView(data) {
        var i = document.createElement('input');
        i.type = 'text';
        return i;
    }

    /* set the score and show the answer of the view and apply score */
    updateAnswerTestView(data, view, score) {
        var value = this.getValueFromView(view);
        if (this.isRight(data, value)) {
            score?.pushScore(1, 1);

            var e = this.getViewView(value);
            e.classList.add('right-answer');
            return e;
        } else if (this.isSkipped(data, value)) {
            score?.pushScore(0, 1);

            var div = document.createElement('div');
            div.appendChild(Column.getSkippedView());
            var e = this.getViewView(data);
            e.classList.add('answer-answer');
            div.appendChild(e);

            return div;
        }  else {
            score?.pushScore(0, 1);

            var div = document.createElement('div');
            var e = this.getViewView(value);
            e.classList.add('wrong-answer');
            div.appendChild(e);

            e = this.getViewView(data);
            e.classList.add('answer-answer');
            div.appendChild(e);
            return div;
        }
    }

    /* get the value stored in the view */
    getValueFromView(view) {
        return {value: view.value};
    }

    /* set the value from the value stored in the view */
    setValueFromView(data, view) {
        data.value = view.value;
    }

    /* get if a value is right */
    isRight(data, value) {
        return data.value === value.value;
    }

    /* get if a value is skipped */
    isSkipped(data, value) {
        return value.value === "";
    }

    /* get the default value of data for the column */
    getDefaultValue() {
        throw new Error("Not overrided");
    }

    /* get the settings view of the column */
    getViewColumnSettings() {
        var div = document.createElement('div');
        div.classList = ['unique-column'];
        
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(Column.SET_CAN_BE_SHOW), 
                getTranslation('column-can-show')
            )
        );
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(Column.SET_CAN_BE_ASK), 
                getTranslation('column-can-ask')
            )
        );
        return div;
    }

    /* get the settings view of the column */
    getEditColumnSettings() {
        var div = document.createElement('div');
        div.classList = ['unique-column'];
        
        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(Column.SET_CAN_BE_SHOW), 
            getTranslation('column-can-show'),
            'column-show'
        ));

        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(Column.SET_CAN_BE_ASK), 
            getTranslation('column-can-ask'),
            'column-ask'
        ));
        return div;
    }

    /* set the settings from the view */
    setEditColumnSettings(view) {
        this.setSettings(Column.SET_CAN_BE_SHOW, view.querySelector('#column-show').checked);
        this.setSettings(Column.SET_CAN_BE_ASK, view.querySelector('#column-ask').checked);
    }

    /* get some parameters in settings */
    getSettings(params) {
        return (this.settings & params) === params;
    }

    /* set some parameters in settings */
    setSettings(params, value) {
        this.settings = value ? this.settings | params : this.settings & ~params;
    }

    /* when importing, verify that a data is valid */
    verifyData(data) {
        return typeof data.value === "string";
    }

    /* cast a data from a csv cell */
    getDataFromCsv(cell) {
        return {value: cell};
    }
}   

/* ################ res/js/diakoluo/test/columns/column-string.js #################*/

class ColumnString extends Column {

    static SET_CASE_SENSITIVE = 256; // 1 << 8
    static SET_TRIM_SPACES = 512; // 1 << 9
    static SET_LONG = 1024; // 1 << 10

    static TYPE = "String";

    constructor(name, description="") {
        super(ColumnString.TYPE, name, description);
        if (name) {
            this.settings |= SET_TRIM_SPACES;
        }
    }

    /* get the default value of data for the column */
    getDefaultValue() {
        return {value: ""};
    }

    /* get if a value is right */
    isRight(data, value) {
        if (this.getSettings(ColumnString.SET_CASE_SENSITIVE)) {
            return data.value === value.value;
        } else {
            return data.value.toLowerCase() === value.value.toLowerCase();
        }
    }

    /* get the settings view of the column */
    getViewColumnSettings() {
        var div = super.getViewColumnSettings();
        div.appendChild(document.createElement('hr'));

        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(ColumnString.SET_CASE_SENSITIVE), 
                getTranslation('column-string-case-sensitive')
            )
        );
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(ColumnString.SET_TRIM_SPACES), 
                getTranslation('column-string-trim-spaces')
            )
        );
        div.appendChild(
            VIEW_UTILS.booleanView(
                this.getSettings(ColumnString.SET_LONG), 
                getTranslation('column-string-long')
            )
        );

        return div;
    }

    /* get the settings view of the column */
    getEditColumnSettings() {
        var div = super.getEditColumnSettings();
        div.appendChild(document.createElement('hr'));

        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(ColumnString.SET_CASE_SENSITIVE), 
            getTranslation('column-string-case-sensitive'),
            'column-case-sensitive'
        ));

        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(ColumnString.SET_TRIM_SPACES), 
            getTranslation('column-string-trim-spaces'),
            'column-trim-spaces'
        ));

        div.appendChild(VIEW_UTILS.booleanEdit(
            this.getSettings(ColumnString.SET_LONG), 
            getTranslation('column-string-long'),
            'column-long'
        ));
        return div;
    }

    /* set the settings from the view */
    setEditColumnSettings(view) {
        super.setEditColumnSettings(view);
        this.setSettings(ColumnString.SET_CASE_SENSITIVE, view.querySelector('#column-case-sensitive').checked);
        this.setSettings(ColumnString.SET_TRIM_SPACES, view.querySelector('#column-trim-spaces').checked);
        this.setSettings(ColumnString.SET_LONG, view.querySelector('#column-long').checked);
    }
}
columnsClass.push(ColumnString);